{
  
    
        "post0": {
            "title": "Apec Chapter 29 Assignment #1",
            "content": "Chapter 29 Assignment #1: 29.1 . FQ: What were the goals of the revolt in sexual mores, the youth protests and student revolts, the feminist movement, and the antiwar protests? To what extent were their goals achieved? . 4/4 . A Culture of Protest . Permissive Society: The Western society after World War II that experienced more sexual freedom. Sexual freedom due to the increased accessibility of the birth control pill in the 1960s, but also included more freedom in homosexuality. This freedom saw an increase in pre- or extra-marital gratification. . Feminism: Revived in the late 1960s and accompanied the student protests. The interest in feminism create the women’s liberation movement which protests for true equality with men in their lives, have equal opportunities, and others like equal pay. The growth of this movement was helped by Betty Friedan’s work The Feminine Mystique which said that women did not have equality with men and were not growing to their potentials. . NOW: Founded by Betty Friedan in 1966, also known as the National Organization of Women. Aimed to have women have full participation in society and provide them with responsibilities and privileges that were the same as men. . Betty Friedan: Important figure in the women’s liberation movement. Published The Feminine Mystique and founded NOW . Kent State Protest: An antiwar protest against the Second Vietnam was in 1970. Protests escalated after President Lysdon Johnson instituted a military draft. This protest at Kent State University resulted in the death of four student protests by the Ohio National Guard. Resulted in the decline of the antiwar movement. This decline could also be from the American willingness to continue the war and the violence creating an appeal for “law and order.” . | Various protest movements in the Western world in the late 1960s . Education, sexual mores, women’s rights . | Antiwar movement against the Second Vietnam War . | . | Goals of these movements were not achieved immediately . Helped propel forces that would transform Western society . | . | . Revolt in Sexual Mores . WWI weakened that rigid code of morals and manners of the 19th c. . New sexual freedom (police in Berlin gave cards that allowed male and female homosexual prostitutes to practice their trade), exploring drugs, introduction of pornography in the 1920s . | Mostly happened in major cities and affected a small number of people . | | Changes in manner and morals were much more significant after WWI and was called the permissive society . | Sexual revolution in the 60s started in Sweden . Sex ed in school . | Disciminalization of homosexuality . | | U.S. and Europe also experienced this revolution . Gay rights movement in California in 1969 . Affected France, Italy, and Britain in 1970 . | | | The pill became more accessible in the mid-60s . Allowed people to be more free in sexual behavior . | | Once hidden subjects became widely known like sexually explicit plays, books, and movies . Allowed public sale of pornography and open prostitution in cities, like Amsterdam . Attracted many tourists . | | | Traditional family was broken apart by the new standards . Dramatic increase in divorice rates in the 60s . | Pre- and extra- marital sex rose substantially . 86% of women and 78% of men participated in extramarital sex based on a 1968 Netherland survey . | | | Another aspect of the sexual revolution for men was the Playboy magazine tha emerged in the 50s . Encouraged men to seek participate in extramarital sex through its nude photographs and articles on masculinity . | | | Youth Protest and Student Revolt . Drugs became part of the culture among young people during the 60s . Marijuna was the main choice of recreational drugs for college and university students . | | Harvard’s psychedelic research on the effects of LSD was done by Timothy Leary and became the leader of hallucinogenic experiences . Young people interested in mind expansion to high levels of consciousness . | | Attitudes towards sex and drugs were one way the youth of the 60s rebelled and questioned authority . | The Second Vietnam War and growing political conscious produced a youth protest movement in the late 60s . | Higher education was reserved for the wealthier classes before WWI . High education became more accessible through lowering fees which increased enrollment of those from the lower and middle classes . | | Student resentment produced from the learning environment . The classrooms after WWII had too many students and professors didn’t pay attention to the students . | Authoritarian-like administrators . | Students felt that the curriculum didn’t keep up with the times . | | The student’s discontent produced revolts in the late 1960s . Also came from students against the Second Vietnam War . | Most famous student revolt was in France, 1968 . | | French student revolt led to others in Europe . None became mass movements . | | West Berlin student revolt protested against Axel Springer, who was the leader of Germany&#39;s largest newspaper establishment . Wanted to destroy what they saw as the corrupt old order . | Influenced by the ideas of Herbert Marcuse who believed that students could free society from the capitalist ruling class . | | Germans’ attempt of revolution failed due to Berliners supporting police repression . | The peak of the student protest movement was in 1968 . | Causes of student radicalism . Wanted reform in universities . | Against the Second Vietnam War . | Against the materialism of society . | | Revolts died in the 70s but the ideas they raised revived in the 90s and 2000s . | | The Feminist Movement . Interest in feminism revived in the late 60s which led to the women’s liberation movement (WLM) . Argued that they were still not being treated equally to men despite having political and legal equality . | Women still paid less than men for the same job . | Traditional views of women . | | Betty Friedan contributed to the growth of the WLM in her 1963 work The Feminine Mystique . Argued that the expectation of the “ideal housewife and mother” limited women from growing to their full potential . | said that it affects the mental and physical health of the country . | | Friedan’s work propelled her into a well-known figure . | Friedan founded the National Organization for Women (NOW) in 1966 . Goals of women having equal privileges and responsibilities with men and be treated equally in society . | Helped the call for an amendment for equal rights of women in the U.S. Constitution . | | | Antiwar Protests . Another one of the main causes of the youth protests was the Second Vietnam War . Viewed as an act of imperialism and aggression . | | Demonstrations took place in Britain, France, and Italy in 1968 . Backfired due to people who liked order over chaos . | | Paolo Pasolini, Italian poet and intellectual, viewed the youth as spoiled brats that are narrow minded . | Divided the U.S. when a military draft was enacted by President Lyndon Johnson for the war in Vietnam escalated protests . Occupation of university buildings, sit-ins, teach-ins, and demonstrations that often led to violence . | | The Kent State Protest in 1970 at Kent State University resulted in 4 students being killed by the Ohio National Guard . Caused the antiwar movement to decline . Also due to Americans becoming more willing to continue the war . | Protests also caused a support for “law and order” . | | | | | . Summary . 29.1 Interaction . “Student Revolts of 1968”: Cause and Effect Flowchart . Cause Effect . Too many students for every professor . some professors didn’t pay attention to their students . | . | Authoritarian-like administrators . | Second Vietnam War . | Students felt like curriculum didn’t match with the times . | Students disliked the materialism of society . | . | Revolts against the Second Vietnam War in US and Europe . Kent State Protest resulted in the deaths of 4 students by the Ohio National Guard . | Americans as a whole became more unwilling to continue the war . | . | Student Revolts in France . | Revolts backfired due to public disliking the chaos and wanting order again . | . | .",
            "url": "https://chewyboba10.github.io/sushi-burrito/2022/10/10/APEC-Chapter-29-Assignment-1.html",
            "relUrl": "/2022/10/10/APEC-Chapter-29-Assignment-1.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Using API",
            "content": "Python RapidAPI | Food | . . import requests url = &quot;https://burgers1.p.rapidapi.com/burgers&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;982d09f4b6msha36abf60bba5931p11f8b1jsn17c33bd8dbf4&quot;, &quot;X-RapidAPI-Host&quot;: &quot;burgers1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) print(response.json()) json = response.json() print(&quot;JSON data is Python type: &quot; + str(type(json))) . [ { &#34;id&#34;: 0, &#34;name&#34;: &#34;Tribute Burger&#34;, &#34;restaurant&#34;: &#34;Honest Burgers&#34;, &#34;web&#34;: &#34;www.honestburgers.co.uk&#34;, &#34;description&#34;: &#34;A mouth-watering honest beef burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;75&#34;, &#34;line1&#34;: &#34;Venn Street&#34;, &#34;line2&#34;: &#34;Clapham&#34;, &#34;postcode&#34;: &#34;SW4 0BD&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 1, &#34;name&#34;: &#34;Pulled Mooshie&#34;, &#34;restaurant&#34;: &#34;Mooshies&#34;, &#34;web&#34;: &#34;www.veganburger.org&#34;, &#34;description&#34;: &#34;Spicy vegan burger with jackfruit&#34;, &#34;ingredients&#34;: [ &#34;jackfruit&#34;, &#34;coleslaw&#34;, &#34;gluten free bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;104&#34;, &#34;line1&#34;: &#34;Brick Lane&#34;, &#34;line2&#34;: &#34;Shoreditch&#34;, &#34;postcode&#34;: &#34;E1 6RL&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Krabby Patty&#34;, &#34;restaurant&#34;: &#34;Krusty Krab&#34;, &#34;web&#34;: &#34;https://twitter.com/SpongeBob&#34;, &#34;description&#34;: &#34;The only people who don&#39;t like a Krabby Patty have never tasted one.&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;patty&#34;, &#34;ketchup&#34;, &#34;mustard&#34;, &#34;pickles&#34;, &#34;onions&#34;, &#34;lettuce&#34;, &#34;cheese&#34;, &#34;tomato&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;831&#34;, &#34;line1&#34;: &#34;Bottom Feeder Lane&#34;, &#34;line2&#34;: &#34;&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;Bikini Bottom, Pacific Ocean&#34; } ] }, { &#34;id&#34;: 3, &#34;name&#34;: &#34;The Good Burger&#34;, &#34;restaurant&#34;: &#34;Good Burger&#34;, &#34;web&#34;: &#34;https://en.wikipedia.org/wiki/Good_Burger&#34;, &#34;description&#34;: &#34;Welcome to Good Burger, home of the Good Burger, can I take your order?&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;tomato&#34;, &#34;Ed&#39;s secret sauce&#34;, &#34;lettuce&#34;, &#34;onions&#34;, &#34;cheese&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;000&#34;, &#34;line1&#34;: &#34;Good Burger&#34;, &#34;line2&#34;: &#34;437 Glendora Ave.&#34;, &#34;postcode&#34;: &#34;CA&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 4, &#34;name&#34;: &#34;Crunchy Nacho Burger&#34;, &#34;restaurant&#34;: &#34;Max Burgers&#34;, &#34;web&#34;: &#34;https://www.max.se/maten/meny/burgare/crunchy-nacho-burger/&#34;, &#34;description&#34;: &#34;The best combination of crunchiness and softness, all in one single burger&#34;, &#34;ingredients&#34;: [ &#34;sesame bun&#34;, &#34;salsa&#34;, &#34;cheddar&#34;, &#34;nachos&#34;, &#34;beef&#34;, &#34;tomato&#34;, &#34;pickled onion&#34;, &#34;lettuce&#34;, &#34;jalapeño mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;48D&#34;, &#34;line1&#34;: &#34;Skeppsbrogatan&#34;, &#34;line2&#34;: &#34;Luleå&#34;, &#34;postcode&#34;: &#34;971 25&#34;, &#34;country&#34;: &#34;Sweden&#34; } ] }, { &#34;id&#34;: 5, &#34;name&#34;: &#34;Barbie Burger&#34;, &#34;restaurant&#34;: &#34;Flower Burger&#34;, &#34;web&#34;: &#34;https://www.flowerburger.it/&#34;, &#34;description&#34;: &#34;From a pink explosion was born Barbie Burger, a special edition in partnership with Mattel&#34;, &#34;ingredients&#34;: [ &#34;pink bun&#34;, &#34;lentil and beetroot burger&#34;, &#34;tomatoes&#34;, &#34;gentilina salad&#34;, &#34;barbie hummus&#34;, &#34;barbie mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;Porta Genova&#34;, &#34;line2&#34;: &#34;Via Tortona&#34;, &#34;postcode&#34;: &#34;20144&#34;, &#34;country&#34;: &#34;Italy&#34; } ] }, { &#34;id&#34;: 6, &#34;name&#34;: &#34;Curry On My Wayward Bun&#34;, &#34;restaurant&#34;: &#34;Bob&#39;s Burgers&#34;, &#34;web&#34;: &#34;https://bobs-burgers.fandom.com/wiki/Burger_of_the_Day&#34;, &#34;description&#34;: &#34;N/A&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;curry&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;0&#34;, &#34;line1&#34;: &#34;Ocean Avenue&#34;, &#34;line2&#34;: &#34;NJ&#34;, &#34;postcode&#34;: &#34;08260&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 7, &#34;name&#34;: &#34;MEISTER ALLER KLASSEN&#34;, &#34;restaurant&#34;: &#34;Burgermeister&#34;, &#34;web&#34;: &#34;https://burger-meister.de&#34;, &#34;description&#34;: &#34;Fast food joint located in a public toilet? Why on earth?!&#34;, &#34;ingredients&#34;: [ &#34;2 x meat&#34;, &#34;2 x cheese&#34;, &#34;bacon&#34;, &#34;barbequesauce&#34;, &#34;jalapenos&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;Potsdamer Platz&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10785&#34;, &#34;country&#34;: &#34;Germany&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;45&#34;, &#34;line1&#34;: &#34;Eberswalder, Schönhauser Allee&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10435&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 8, &#34;name&#34;: &#34;Vegetarian Burger (Indian Style)&#34;, &#34;restaurant&#34;: &#34;Indian Burgers&#34;, &#34;web&#34;: &#34;https://www.cookwithmanali.com/vegetarian-burger-indian-style/&#34;, &#34;description&#34;: &#34;With summer around the corner, I had to share a vegetarian burger recipe with you guys. Actually I plan to share more in the next month but I thought I will start with this Indian style Vegetarian Burger aka Masala Burger!&#34;, &#34;ingredients&#34;: [ &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;Veggies&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;007&#34;, &#34;line1&#34;: &#34;Line1&#34;, &#34;line2&#34;: &#34;Line2&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 9, &#34;name&#34;: &#34;Fat Santa&#34;, &#34;restaurant&#34;: &#34;Sky City Hamilton&#34;, &#34;web&#34;: &#34;https://skycityhamilton.co.nz/eat-drink/eat-burger/&#34;, &#34;description&#34;: &#34;A Christmas themed burger&#34;, &#34;ingredients&#34;: [ &#34;chicken thigh&#34;, &#34;champagne ham&#34;, &#34;sage and onion stuffing&#34;, &#34;gravy mash&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;cranberry sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;348&#34;, &#34;line1&#34;: &#34;Victoria street&#34;, &#34;line2&#34;: &#34;Hamilton Central, Hamilton&#34;, &#34;postcode&#34;: &#34;3204&#34;, &#34;country&#34;: &#34;New Zealand&#34; } ] }, { &#34;id&#34;: 10, &#34;name&#34;: &#34;Blondie&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Delicious steak burger&#34;, &#34;ingredients&#34;: [ &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;bacon&#34;, &#34;egg&#34;, &#34;cheese&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 11, &#34;name&#34;: &#34;Monster Burger&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Massive meaty burger - the size of a dinner plate&#34;, &#34;ingredients&#34;: [ &#34;250g patty&#34;, &#34;bacon&#34;, &#34;cheese&#34;, &#34;2 eggs&#34;, &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 12, &#34;name&#34;: &#34;Buffalo chicken burger&#34;, &#34;restaurant&#34;: &#34;Meat Mission&#34;, &#34;web&#34;: &#34;http://meatliquor.com/&#34;, &#34;description&#34;: &#34;Large, messy, super tasty buffalo chicken burger&#34;, &#34;ingredients&#34;: [ &#34;Fried chicken breast&#34;, &#34;House-made buffalo sauce&#34;, &#34;Lettuce&#34;, &#34;Red onions&#34;, &#34;Blue cheese sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;15&#34;, &#34;line1&#34;: &#34;Hoxton Market,&#34;, &#34;line2&#34;: &#34;Hackney, London&#34;, &#34;postcode&#34;: &#34;N1 6HG&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 13, &#34;name&#34;: &#34;Cheatday Burger&#34;, &#34;restaurant&#34;: &#34;Burgeramt&#34;, &#34;web&#34;: &#34;https://www.burgeramt.com/&#34;, &#34;description&#34;: &#34;Perfect when you need a day off from your workout routine&#34;, &#34;ingredients&#34;: [ &#34;double beef&#34;, &#34;chilli-cheese sauce&#34;, &#34;2 slices cheddar cheese&#34;, &#34;crispy bacon stripes&#34;, &#34;nachos&#34;, &#34;mayonnaise&#34;, &#34;mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;21 - 22&#34;, &#34;line1&#34;: &#34;Krossener Straße&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10245&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 14, &#34;name&#34;: &#34;The Truffler (vegan)&#34;, &#34;restaurant&#34;: &#34;Byron Burgers&#34;, &#34;web&#34;: &#34;https://www.byron.co.uk/&#34;, &#34;description&#34;: &#34;Beyond Meat patty, crispy onions, mushrooms, pickled red onions, lettuce American mustard, truffle ‘cheese’ fondue, truffle ‘mayo’&#34;, &#34;ingredients&#34;: [ &#34;1/4 Beyond Meat patty&#34;, &#34;crispy onions&#34;, &#34;sauteed mushrooms&#34;, &#34;pickled red onions&#34;, &#34;lettuce&#34;, &#34;American mustard&#34;, &#34;truffle vegan cheese fondue&#34;, &#34;truffle vegan mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;41-45&#34;, &#34;line1&#34;: &#34;The Cut&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;SE1 8LF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;The Loft&#34;, &#34;line1&#34;: &#34;Westfield Shopping Centre&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;W12 7GF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 15, &#34;name&#34;: &#34;Aloette Buger&#34;, &#34;restaurant&#34;: &#34;Aloette&#34;, &#34;web&#34;: &#34;https://aloetterestaurant.com/&#34;, &#34;description&#34;: &#34;Haute cuisine meets cravings for cheeseburgers.&#34;, &#34;ingredients&#34;: [ &#34;6oz beef patty, served medium&#34;, &#34;griddled beaufort cheese&#34;, &#34;cheddar mayo&#34;, &#34;shredded lettuce&#34;, &#34;potato roll&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;163&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2A5&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 16, &#34;name&#34;: &#34;BBQ Burger&#34;, &#34;restaurant&#34;: &#34;Fresh Plant Powered&#34;, &#34;web&#34;: &#34;https://freshplantpowered.com/&#34;, &#34;description&#34;: &#34;Vegan burger made from whole, natural ingredients.&#34;, &#34;ingredients&#34;: [ &#34;house-made grain burger&#34;, &#34;bbq sauce&#34;, &#34;quinoa onion rings&#34;, &#34;vegan garlic mayo&#34;, &#34;napa cabbage&#34;, &#34;banana chillies&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;147&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2L7&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;326&#34;, &#34;line1&#34;: &#34;Bloor Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5S 1W5&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;894&#34;, &#34;line1&#34;: &#34;Queen Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M6J 1G3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;90&#34;, &#34;line1&#34;: &#34;Eglinton Avenue East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M4P 2Y3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Front Street East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5E 1B3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;95&#34;, &#34;line1&#34;: &#34;Queen Elizabeth Blvd&#34;, &#34;line2&#34;: &#34;Etobicoke&#34;, &#34;postcode&#34;: &#34;M8Z 1P3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 6, &#34;number&#34;: &#34;8768&#34;, &#34;line1&#34;: &#34;Sunset Blvd&#34;, &#34;line2&#34;: &#34;Los Angeles&#34;, &#34;postcode&#34;: &#34;90069&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 17, &#34;name&#34;: &#34;Carroll&#39;s Cheese Burger&#34;, &#34;restaurant&#34;: &#34;Carroll&#39;s Pub Worms&#34;, &#34;web&#34;: &#34;https://www.carrolls-pub-worms.de/&#34;, &#34;description&#34;: &#34;Tasty black angus beef burger.&#34;, &#34;ingredients&#34;: [ &#34;Irish black angus beef&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;caramelized onions&#34;, &#34;pickles&#34;, &#34;cheddar cheese&#34;, &#34;tomato relish&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;54&#34;, &#34;line1&#34;: &#34;Rheinstraße&#34;, &#34;line2&#34;: &#34;Worms&#34;, &#34;postcode&#34;: &#34;67547&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 18, &#34;name&#34;: &#34;Mojitto Burger&#34;, &#34;restaurant&#34;: &#34;Burger King India&#34;, &#34;web&#34;: &#34;www.mojitto.com&#34;, &#34;description&#34;: &#34;Burger a day keeps the fat away&#34;, &#34;ingredients&#34;: [ &#34;bread&#34;, &#34;maida&#34;, &#34;chick&#34;, &#34;patty&#34; ], &#34;addresses&#34;: [ { &#34;addressID&#34;: 0, &#34;number&#34;: &#34;8A&#34;, &#34;line1&#34;: &#34;Kaythye millath street&#34;, &#34;postcode&#34;: &#34;620020&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 19, &#34;name&#34;: &#34;Double Slab Burger&#34;, &#34;restaurant&#34;: &#34;Slab Burgers&#34;, &#34;web&#34;: &#34;www.slabburgers.com&#34;, &#34;description&#34;: &#34;taste of hormone-free running cows&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;caramelized onions&#34;, &#34;slab sauce&#34;, &#34;pickles&#34;, &#34;mushrooms&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Charles Street West&#34;, &#34;line2&#34;: &#34;Toronto, Ontario&#34;, &#34;postcode&#34;: &#34;M4Y 2R4&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 20, &#34;name&#34;: &#34;Du Brown&#34;, &#34;restaurant&#34;: &#34;Du Brown Burger Café&#34;, &#34;web&#34;: &#34;https://www.dubrown.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;bacon&#34;, &#34;caramelized onions&#34;, &#34;cheddar cheese&#34;, &#34;barbecue sauce&#34;, &#34;onion rings&#34;, &#34;jalepeños&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;chipote mayonaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;rue St Léonard&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 21, &#34;name&#34;: &#34;Melting Potes&#34;, &#34;restaurant&#34;: &#34;Melting Potes Nantes&#34;, &#34;web&#34;: &#34;https://www.meltingpotesnantes.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;boulevard de la Prairie au Duc&#34;, &#34;line2&#34;: &#34;Ile de Nantes, Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 22, &#34;name&#34;: &#34;Big Fernand&#34;, &#34;restaurant&#34;: &#34;Big Fernand&#34;, &#34;web&#34;: &#34;https://bigfernand.com/&#34;, &#34;description&#34;: &#34;L&#39;atelier du Hamburgé - The burger workshop&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;sundried tomates&#34;, &#34;tatar sauce&#34;, &#34;confit onions&#34;, &#34;blue cheese&#34;, &#34;smokey bacon&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue des Halles&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;3&#34;, &#34;line1&#34;: &#34;Place de Béthune&#34;, &#34;line2&#34;: &#34;Lille&#34;, &#34;postcode&#34;: &#34;59000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;6&#34;, &#34;line1&#34;: &#34;place Jean Jaurès&#34;, &#34;line2&#34;: &#34;Montpellier&#34;, &#34;postcode&#34;: &#34;34000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;86&#34;, &#34;line1&#34;: &#34;Boulevard du Montparnasse&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75014&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;55&#34;, &#34;line1&#34;: &#34;rue de Faubourg Poissonnière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;4&#34;, &#34;line1&#34;: &#34;rue du Parchemin&#34;, &#34;line2&#34;: &#34;Strasbourg&#34;, &#34;postcode&#34;: &#34;67000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 23, &#34;name&#34;: &#34;PNY Burger&#34;, &#34;restaurant&#34;: &#34;PNY Burger&#34;, &#34;web&#34;: &#34;https://pnyburger.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;50&#34;, &#34;line1&#34;: &#34;rue de Cautartin&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;120&#34;, &#34;line1&#34;: &#34;rue du Faubourg St Antoine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75012&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;rue Perrée&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75003&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;96&#34;, &#34;line1&#34;: &#34;rue Oberkampf&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75011&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;24&#34;, &#34;line1&#34;: &#34;rue Pierre Fontaine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 24, &#34;name&#34;: &#34;231 East&#34;, &#34;restaurant&#34;: &#34;231 East Street&#34;, &#34;web&#34;: &#34;https://www.231-east.fr/&#34;, &#34;description&#34;: &#34;True New York style burger in France&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;smoked bacon&#34;, &#34;chicken&#34;, &#34;veggie burgers&#34;, &#34;brioche bun&#34;, &#34;honey mustard sauce&#34;, &#34;onion chutney&#34;, &#34;pepper sauce&#34;, &#34;avacado&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue de la Couronne&#34;, &#34;line2&#34;: &#34;Aix-en-Provence&#34;, &#34;postcode&#34;: &#34;13100&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;9&#34;, &#34;line1&#34;: &#34;faubourg Sainte-Claire&#34;, &#34;line2&#34;: &#34;Annecy&#34;, &#34;postcode&#34;: &#34;7400&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;10&#34;, &#34;line1&#34;: &#34;Grande rue&#34;, &#34;line2&#34;: &#34;Grenoble&#34;, &#34;postcode&#34;: &#34;38000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;2&#34;, &#34;line1&#34;: &#34;rue de la Pépinière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75008&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;&#34;, &#34;line1&#34;: &#34;boulevard Géneral de Gaulle&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 25, &#34;name&#34;: &#34;Cajun Black Bean Burger&#34;, &#34;restaurant&#34;: &#34;The Chicago Diner&#34;, &#34;web&#34;: &#34;www.veggiediner.com&#34;, &#34;description&#34;: &#34;a hearty veggie burger with a kick that goes great with sweet potato fries&#34;, &#34;ingredients&#34;: [ &#34;spicy black bean veggie patty&#34;, &#34;sautéed onions&#34;, &#34;mushrooms&#34;, &#34;spinach&#34;, &#34;tomato&#34;, &#34;fried jalapeño&#34;, &#34;cheddar sauce&#34;, &#34;creole mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;3411&#34;, &#34;line1&#34;: &#34;N Halsted St&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60657&#34;, &#34;country&#34;: &#34;USA&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;2333&#34;, &#34;line1&#34;: &#34;N Milwaukee Ave&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60647&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 26, &#34;name&#34;: &#34;Hatch Green Chile Bacon Burger&#34;, &#34;restaurant&#34;: &#34;Whataburger&#34;, &#34;web&#34;: &#34;www.whataburger.com&#34;, &#34;description&#34;: &#34;burger with hatch green chiles, bacon and cheese&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheese&#34;, &#34;bacon&#34;, &#34;hatch green chiles&#34;, &#34;mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;984&#34;, &#34;line1&#34;: &#34;388 E Stacy Rd&#34;, &#34;line2&#34;: &#34;Allen, TX&#34;, &#34;postcode&#34;: &#34;75002&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 27, &#34;name&#34;: &#34;The Street Burgers and Coctail Bar Prague 1&#34;, &#34;restaurant&#34;: &#34;The Street&#34;, &#34;web&#34;: &#34;www.thestreet.cz&#34;, &#34;description&#34;: &#34;American, Bar, International, European, Vegetarian Friendly&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheddar cheese&#34;, &#34;blue cheese&#34;, &#34;onion&#34;, &#34;mozzarella&#34;, &#34;bacon&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;11&#34;, &#34;line1&#34;: &#34;Konviktska&#34;, &#34;line2&#34;: &#34;Prague&#34;, &#34;postcode&#34;: &#34;110 00&#34;, &#34;country&#34;: &#34;The Czech Republic&#34; } ] } ] [{&#39;id&#39;: 0, &#39;name&#39;: &#39;Tribute Burger&#39;, &#39;restaurant&#39;: &#39;Honest Burgers&#39;, &#39;web&#39;: &#39;www.honestburgers.co.uk&#39;, &#39;description&#39;: &#39;A mouth-watering honest beef burger&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;american cheese&#39;, &#39;burger sauce&#39;, &#39;french mustard&#39;, &#39;pickes&#39;, &#39;onion&#39;, &#39;lettuce&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;75&#39;, &#39;line1&#39;: &#39;Venn Street&#39;, &#39;line2&#39;: &#39;Clapham&#39;, &#39;postcode&#39;: &#39;SW4 0BD&#39;, &#39;country&#39;: &#39;United Kingdom&#39;}]}, {&#39;id&#39;: 1, &#39;name&#39;: &#39;Pulled Mooshie&#39;, &#39;restaurant&#39;: &#39;Mooshies&#39;, &#39;web&#39;: &#39;www.veganburger.org&#39;, &#39;description&#39;: &#39;Spicy vegan burger with jackfruit&#39;, &#39;ingredients&#39;: [&#39;jackfruit&#39;, &#39;coleslaw&#39;, &#39;gluten free bun&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;104&#39;, &#39;line1&#39;: &#39;Brick Lane&#39;, &#39;line2&#39;: &#39;Shoreditch&#39;, &#39;postcode&#39;: &#39;E1 6RL&#39;, &#39;country&#39;: &#39;United Kingdom&#39;}]}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Krabby Patty&#39;, &#39;restaurant&#39;: &#39;Krusty Krab&#39;, &#39;web&#39;: &#39;https://twitter.com/SpongeBob&#39;, &#39;description&#39;: &#34;The only people who don&#39;t like a Krabby Patty have never tasted one.&#34;, &#39;ingredients&#39;: [&#39;bun&#39;, &#39;patty&#39;, &#39;ketchup&#39;, &#39;mustard&#39;, &#39;pickles&#39;, &#39;onions&#39;, &#39;lettuce&#39;, &#39;cheese&#39;, &#39;tomato&#39;, &#39;bun&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;831&#39;, &#39;line1&#39;: &#39;Bottom Feeder Lane&#39;, &#39;line2&#39;: &#39;&#39;, &#39;postcode&#39;: &#39;&#39;, &#39;country&#39;: &#39;Bikini Bottom, Pacific Ocean&#39;}]}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;The Good Burger&#39;, &#39;restaurant&#39;: &#39;Good Burger&#39;, &#39;web&#39;: &#39;https://en.wikipedia.org/wiki/Good_Burger&#39;, &#39;description&#39;: &#39;Welcome to Good Burger, home of the Good Burger, can I take your order?&#39;, &#39;ingredients&#39;: [&#39;bun&#39;, &#39;tomato&#39;, &#34;Ed&#39;s secret sauce&#34;, &#39;lettuce&#39;, &#39;onions&#39;, &#39;cheese&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;000&#39;, &#39;line1&#39;: &#39;Good Burger&#39;, &#39;line2&#39;: &#39;437 Glendora Ave.&#39;, &#39;postcode&#39;: &#39;CA&#39;, &#39;country&#39;: &#39;United States&#39;}]}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Crunchy Nacho Burger&#39;, &#39;restaurant&#39;: &#39;Max Burgers&#39;, &#39;web&#39;: &#39;https://www.max.se/maten/meny/burgare/crunchy-nacho-burger/&#39;, &#39;description&#39;: &#39;The best combination of crunchiness and softness, all in one single burger&#39;, &#39;ingredients&#39;: [&#39;sesame bun&#39;, &#39;salsa&#39;, &#39;cheddar&#39;, &#39;nachos&#39;, &#39;beef&#39;, &#39;tomato&#39;, &#39;pickled onion&#39;, &#39;lettuce&#39;, &#39;jalapeño mayonnaise&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;48D&#39;, &#39;line1&#39;: &#39;Skeppsbrogatan&#39;, &#39;line2&#39;: &#39;Luleå&#39;, &#39;postcode&#39;: &#39;971 25&#39;, &#39;country&#39;: &#39;Sweden&#39;}]}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Barbie Burger&#39;, &#39;restaurant&#39;: &#39;Flower Burger&#39;, &#39;web&#39;: &#39;https://www.flowerburger.it/&#39;, &#39;description&#39;: &#39;From a pink explosion was born Barbie Burger, a special edition in partnership with Mattel&#39;, &#39;ingredients&#39;: [&#39;pink bun&#39;, &#39;lentil and beetroot burger&#39;, &#39;tomatoes&#39;, &#39;gentilina salad&#39;, &#39;barbie hummus&#39;, &#39;barbie mayo&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;12&#39;, &#39;line1&#39;: &#39;Porta Genova&#39;, &#39;line2&#39;: &#39;Via Tortona&#39;, &#39;postcode&#39;: &#39;20144&#39;, &#39;country&#39;: &#39;Italy&#39;}]}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Curry On My Wayward Bun&#39;, &#39;restaurant&#39;: &#34;Bob&#39;s Burgers&#34;, &#39;web&#39;: &#39;https://bobs-burgers.fandom.com/wiki/Burger_of_the_Day&#39;, &#39;description&#39;: &#39;N/A&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;curry&#39;, &#39;bun&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;0&#39;, &#39;line1&#39;: &#39;Ocean Avenue&#39;, &#39;line2&#39;: &#39;NJ&#39;, &#39;postcode&#39;: &#39;08260&#39;, &#39;country&#39;: &#39;United States&#39;}]}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;MEISTER ALLER KLASSEN&#39;, &#39;restaurant&#39;: &#39;Burgermeister&#39;, &#39;web&#39;: &#39;https://burger-meister.de&#39;, &#39;description&#39;: &#39;Fast food joint located in a public toilet? Why on earth?!&#39;, &#39;ingredients&#39;: [&#39;2 x meat&#39;, &#39;2 x cheese&#39;, &#39;bacon&#39;, &#39;barbequesauce&#39;, &#39;jalapenos&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;1&#39;, &#39;line1&#39;: &#39;Potsdamer Platz&#39;, &#39;line2&#39;: &#39;Berlin&#39;, &#39;postcode&#39;: &#39;10785&#39;, &#39;country&#39;: &#39;Germany&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;45&#39;, &#39;line1&#39;: &#39;Eberswalder, Schönhauser Allee&#39;, &#39;line2&#39;: &#39;Berlin&#39;, &#39;postcode&#39;: &#39;10435&#39;, &#39;country&#39;: &#39;Germany&#39;}]}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;Vegetarian Burger (Indian Style)&#39;, &#39;restaurant&#39;: &#39;Indian Burgers&#39;, &#39;web&#39;: &#39;https://www.cookwithmanali.com/vegetarian-burger-indian-style/&#39;, &#39;description&#39;: &#39;With summer around the corner, I had to share a vegetarian burger recipe with you guys. Actually I plan to share more in the next month but I thought I will start with this Indian style Vegetarian Burger aka Masala Burger!&#39;, &#39;ingredients&#39;: [&#39;american cheese&#39;, &#39;burger sauce&#39;, &#39;french mustard&#39;, &#39;pickes&#39;, &#39;onion&#39;, &#39;Veggies&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;007&#39;, &#39;line1&#39;: &#39;Line1&#39;, &#39;line2&#39;: &#39;Line2&#39;, &#39;postcode&#39;: &#39;&#39;, &#39;country&#39;: &#39;India&#39;}]}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;Fat Santa&#39;, &#39;restaurant&#39;: &#39;Sky City Hamilton&#39;, &#39;web&#39;: &#39;https://skycityhamilton.co.nz/eat-drink/eat-burger/&#39;, &#39;description&#39;: &#39;A Christmas themed burger&#39;, &#39;ingredients&#39;: [&#39;chicken thigh&#39;, &#39;champagne ham&#39;, &#39;sage and onion stuffing&#39;, &#39;gravy mash&#39;, &#39;lettuce&#39;, &#39;tomato&#39;, &#39;cranberry sauce&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;348&#39;, &#39;line1&#39;: &#39;Victoria street&#39;, &#39;line2&#39;: &#39;Hamilton Central, Hamilton&#39;, &#39;postcode&#39;: &#39;3204&#39;, &#39;country&#39;: &#39;New Zealand&#39;}]}, {&#39;id&#39;: 10, &#39;name&#39;: &#39;Blondie&#39;, &#39;restaurant&#39;: &#39;Yankys&#39;, &#39;web&#39;: &#39;http://yankyslambton.co.za/menu/&#39;, &#39;description&#39;: &#39;Delicious steak burger&#39;, &#39;ingredients&#39;: [&#39;steak&#39;, &#39;BBQ sauce&#39;, &#39;bacon&#39;, &#39;egg&#39;, &#39;cheese&#39;, &#39;lettuce&#39;, &#39;tomato&#39;, &#39;onion&#39;, &#39;gerkins&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;114&#39;, &#39;line1&#39;: &#39;Webber Road&#39;, &#39;line2&#39;: &#39;Lambton, Germiston&#39;, &#39;postcode&#39;: &#39;1414&#39;, &#39;country&#39;: &#39;South Africa&#39;}]}, {&#39;id&#39;: 11, &#39;name&#39;: &#39;Monster Burger&#39;, &#39;restaurant&#39;: &#39;Yankys&#39;, &#39;web&#39;: &#39;http://yankyslambton.co.za/menu/&#39;, &#39;description&#39;: &#39;Massive meaty burger - the size of a dinner plate&#39;, &#39;ingredients&#39;: [&#39;250g patty&#39;, &#39;bacon&#39;, &#39;cheese&#39;, &#39;2 eggs&#39;, &#39;steak&#39;, &#39;BBQ sauce&#39;, &#39;lettuce&#39;, &#39;tomato&#39;, &#39;onion&#39;, &#39;gerkins&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;114&#39;, &#39;line1&#39;: &#39;Webber Road&#39;, &#39;line2&#39;: &#39;Lambton, Germiston&#39;, &#39;postcode&#39;: &#39;1414&#39;, &#39;country&#39;: &#39;South Africa&#39;}]}, {&#39;id&#39;: 12, &#39;name&#39;: &#39;Buffalo chicken burger&#39;, &#39;restaurant&#39;: &#39;Meat Mission&#39;, &#39;web&#39;: &#39;http://meatliquor.com/&#39;, &#39;description&#39;: &#39;Large, messy, super tasty buffalo chicken burger&#39;, &#39;ingredients&#39;: [&#39;Fried chicken breast&#39;, &#39;House-made buffalo sauce&#39;, &#39;Lettuce&#39;, &#39;Red onions&#39;, &#39;Blue cheese sauce&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;15&#39;, &#39;line1&#39;: &#39;Hoxton Market,&#39;, &#39;line2&#39;: &#39;Hackney, London&#39;, &#39;postcode&#39;: &#39;N1 6HG&#39;, &#39;country&#39;: &#39;United Kingdom&#39;}]}, {&#39;id&#39;: 13, &#39;name&#39;: &#39;Cheatday Burger&#39;, &#39;restaurant&#39;: &#39;Burgeramt&#39;, &#39;web&#39;: &#39;https://www.burgeramt.com/&#39;, &#39;description&#39;: &#39;Perfect when you need a day off from your workout routine&#39;, &#39;ingredients&#39;: [&#39;double beef&#39;, &#39;chilli-cheese sauce&#39;, &#39;2 slices cheddar cheese&#39;, &#39;crispy bacon stripes&#39;, &#39;nachos&#39;, &#39;mayonnaise&#39;, &#39;mustard&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;21 - 22&#39;, &#39;line1&#39;: &#39;Krossener Straße&#39;, &#39;line2&#39;: &#39;Berlin&#39;, &#39;postcode&#39;: &#39;10245&#39;, &#39;country&#39;: &#39;Germany&#39;}]}, {&#39;id&#39;: 14, &#39;name&#39;: &#39;The Truffler (vegan)&#39;, &#39;restaurant&#39;: &#39;Byron Burgers&#39;, &#39;web&#39;: &#39;https://www.byron.co.uk/&#39;, &#39;description&#39;: &#39;Beyond Meat patty, crispy onions, mushrooms, pickled red onions, lettuce American mustard, truffle ‘cheese’ fondue, truffle ‘mayo’&#39;, &#39;ingredients&#39;: [&#39;1/4 Beyond Meat patty&#39;, &#39;crispy onions&#39;, &#39;sauteed mushrooms&#39;, &#39;pickled red onions&#39;, &#39;lettuce&#39;, &#39;American mustard&#39;, &#39;truffle vegan cheese fondue&#39;, &#39;truffle vegan mayo&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;41-45&#39;, &#39;line1&#39;: &#39;The Cut&#39;, &#39;line2&#39;: &#39;London&#39;, &#39;postcode&#39;: &#39;SE1 8LF&#39;, &#39;country&#39;: &#39;United Kingdom&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;The Loft&#39;, &#39;line1&#39;: &#39;Westfield Shopping Centre&#39;, &#39;line2&#39;: &#39;London&#39;, &#39;postcode&#39;: &#39;W12 7GF&#39;, &#39;country&#39;: &#39;United Kingdom&#39;}]}, {&#39;id&#39;: 15, &#39;name&#39;: &#39;Aloette Buger&#39;, &#39;restaurant&#39;: &#39;Aloette&#39;, &#39;web&#39;: &#39;https://aloetterestaurant.com/&#39;, &#39;description&#39;: &#39;Haute cuisine meets cravings for cheeseburgers.&#39;, &#39;ingredients&#39;: [&#39;6oz beef patty, served medium&#39;, &#39;griddled beaufort cheese&#39;, &#39;cheddar mayo&#39;, &#39;shredded lettuce&#39;, &#39;potato roll&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;163&#39;, &#39;line1&#39;: &#39;Spadina Ave&#39;, &#39;line2&#39;: &#39;Toronto&#39;, &#39;postcode&#39;: &#39;M5V 2A5&#39;, &#39;country&#39;: &#39;Canada&#39;}]}, {&#39;id&#39;: 16, &#39;name&#39;: &#39;BBQ Burger&#39;, &#39;restaurant&#39;: &#39;Fresh Plant Powered&#39;, &#39;web&#39;: &#39;https://freshplantpowered.com/&#39;, &#39;description&#39;: &#39;Vegan burger made from whole, natural ingredients.&#39;, &#39;ingredients&#39;: [&#39;house-made grain burger&#39;, &#39;bbq sauce&#39;, &#39;quinoa onion rings&#39;, &#39;vegan garlic mayo&#39;, &#39;napa cabbage&#39;, &#39;banana chillies&#39;, &#39;tomato&#39;, &#39;lettuce&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;147&#39;, &#39;line1&#39;: &#39;Spadina Ave&#39;, &#39;line2&#39;: &#39;Toronto&#39;, &#39;postcode&#39;: &#39;M5V 2L7&#39;, &#39;country&#39;: &#39;Canada&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;326&#39;, &#39;line1&#39;: &#39;Bloor Street West&#39;, &#39;line2&#39;: &#39;Toronto&#39;, &#39;postcode&#39;: &#39;M5S 1W5&#39;, &#39;country&#39;: &#39;Canada&#39;}, {&#39;addressId&#39;: 2, &#39;number&#39;: &#39;894&#39;, &#39;line1&#39;: &#39;Queen Street West&#39;, &#39;line2&#39;: &#39;Toronto&#39;, &#39;postcode&#39;: &#39;M6J 1G3&#39;, &#39;country&#39;: &#39;Canada&#39;}, {&#39;addressId&#39;: 3, &#39;number&#39;: &#39;90&#39;, &#39;line1&#39;: &#39;Eglinton Avenue East&#39;, &#39;line2&#39;: &#39;Toronto&#39;, &#39;postcode&#39;: &#39;M4P 2Y3&#39;, &#39;country&#39;: &#39;Canada&#39;}, {&#39;addressId&#39;: 4, &#39;number&#39;: &#39;47&#39;, &#39;line1&#39;: &#39;Front Street East&#39;, &#39;line2&#39;: &#39;Toronto&#39;, &#39;postcode&#39;: &#39;M5E 1B3&#39;, &#39;country&#39;: &#39;Canada&#39;}, {&#39;addressId&#39;: 5, &#39;number&#39;: &#39;95&#39;, &#39;line1&#39;: &#39;Queen Elizabeth Blvd&#39;, &#39;line2&#39;: &#39;Etobicoke&#39;, &#39;postcode&#39;: &#39;M8Z 1P3&#39;, &#39;country&#39;: &#39;Canada&#39;}, {&#39;addressId&#39;: 6, &#39;number&#39;: &#39;8768&#39;, &#39;line1&#39;: &#39;Sunset Blvd&#39;, &#39;line2&#39;: &#39;Los Angeles&#39;, &#39;postcode&#39;: &#39;90069&#39;, &#39;country&#39;: &#39;United States&#39;}]}, {&#39;id&#39;: 17, &#39;name&#39;: &#34;Carroll&#39;s Cheese Burger&#34;, &#39;restaurant&#39;: &#34;Carroll&#39;s Pub Worms&#34;, &#39;web&#39;: &#39;https://www.carrolls-pub-worms.de/&#39;, &#39;description&#39;: &#39;Tasty black angus beef burger.&#39;, &#39;ingredients&#39;: [&#39;Irish black angus beef&#39;, &#39;tomato&#39;, &#39;lettuce&#39;, &#39;caramelized onions&#39;, &#39;pickles&#39;, &#39;cheddar cheese&#39;, &#39;tomato relish&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;54&#39;, &#39;line1&#39;: &#39;Rheinstraße&#39;, &#39;line2&#39;: &#39;Worms&#39;, &#39;postcode&#39;: &#39;67547&#39;, &#39;country&#39;: &#39;Germany&#39;}]}, {&#39;id&#39;: 18, &#39;name&#39;: &#39;Mojitto Burger&#39;, &#39;restaurant&#39;: &#39;Burger King India&#39;, &#39;web&#39;: &#39;www.mojitto.com&#39;, &#39;description&#39;: &#39;Burger a day keeps the fat away&#39;, &#39;ingredients&#39;: [&#39;bread&#39;, &#39;maida&#39;, &#39;chick&#39;, &#39;patty&#39;], &#39;addresses&#39;: [{&#39;addressID&#39;: 0, &#39;number&#39;: &#39;8A&#39;, &#39;line1&#39;: &#39;Kaythye millath street&#39;, &#39;postcode&#39;: &#39;620020&#39;, &#39;country&#39;: &#39;India&#39;}]}, {&#39;id&#39;: 19, &#39;name&#39;: &#39;Double Slab Burger&#39;, &#39;restaurant&#39;: &#39;Slab Burgers&#39;, &#39;web&#39;: &#39;www.slabburgers.com&#39;, &#39;description&#39;: &#39;taste of hormone-free running cows&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;caramelized onions&#39;, &#39;slab sauce&#39;, &#39;pickles&#39;, &#39;mushrooms&#39;, &#39;tomato&#39;, &#39;lettuce&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;47&#39;, &#39;line1&#39;: &#39;Charles Street West&#39;, &#39;line2&#39;: &#39;Toronto, Ontario&#39;, &#39;postcode&#39;: &#39;M4Y 2R4&#39;, &#39;country&#39;: &#39;Canada&#39;}]}, {&#39;id&#39;: 20, &#39;name&#39;: &#39;Du Brown&#39;, &#39;restaurant&#39;: &#39;Du Brown Burger Café&#39;, &#39;web&#39;: &#39;https://www.dubrown.com/&#39;, &#39;description&#39;: &#39;Home of the no bullshit burger&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;bacon&#39;, &#39;caramelized onions&#39;, &#39;cheddar cheese&#39;, &#39;barbecue sauce&#39;, &#39;onion rings&#39;, &#39;jalepeños&#39;, &#39;tomato&#39;, &#39;lettuce&#39;, &#39;chipote mayonaise&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;12&#39;, &#39;line1&#39;: &#39;rue St Léonard&#39;, &#39;line2&#39;: &#39;Nantes&#39;, &#39;postcode&#39;: &#39;44000&#39;, &#39;country&#39;: &#39;France&#39;}]}, {&#39;id&#39;: 21, &#39;name&#39;: &#39;Melting Potes&#39;, &#39;restaurant&#39;: &#39;Melting Potes Nantes&#39;, &#39;web&#39;: &#39;https://www.meltingpotesnantes.com/&#39;, &#39;description&#39;: &#39;Home of the no bullshit burger&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;poutine&#39;, &#39;raclette cheese&#39;, &#39;honey mustard sauce&#39;, &#39;goats cheese&#39;, &#39;crispy onions&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;12&#39;, &#39;line1&#39;: &#39;boulevard de la Prairie au Duc&#39;, &#39;line2&#39;: &#39;Ile de Nantes, Nantes&#39;, &#39;postcode&#39;: &#39;44000&#39;, &#39;country&#39;: &#39;France&#39;}]}, {&#39;id&#39;: 22, &#39;name&#39;: &#39;Big Fernand&#39;, &#39;restaurant&#39;: &#39;Big Fernand&#39;, &#39;web&#39;: &#39;https://bigfernand.com/&#39;, &#39;description&#39;: &#34;L&#39;atelier du Hamburgé - The burger workshop&#34;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;sundried tomates&#39;, &#39;tatar sauce&#39;, &#39;confit onions&#39;, &#39;blue cheese&#39;, &#39;smokey bacon&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;7&#39;, &#39;line1&#39;: &#39;rue des Halles&#39;, &#39;line2&#39;: &#39;Nantes&#39;, &#39;postcode&#39;: &#39;44000&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;3&#39;, &#39;line1&#39;: &#39;Place de Béthune&#39;, &#39;line2&#39;: &#39;Lille&#39;, &#39;postcode&#39;: &#39;59000&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 2, &#39;number&#39;: &#39;6&#39;, &#39;line1&#39;: &#39;place Jean Jaurès&#39;, &#39;line2&#39;: &#39;Montpellier&#39;, &#39;postcode&#39;: &#39;34000&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 3, &#39;number&#39;: &#39;86&#39;, &#39;line1&#39;: &#39;Boulevard du Montparnasse&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75014&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 4, &#39;number&#39;: &#39;55&#39;, &#39;line1&#39;: &#39;rue de Faubourg Poissonnière&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75009&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 5, &#39;number&#39;: &#39;4&#39;, &#39;line1&#39;: &#39;rue du Parchemin&#39;, &#39;line2&#39;: &#39;Strasbourg&#39;, &#39;postcode&#39;: &#39;67000&#39;, &#39;country&#39;: &#39;France&#39;}]}, {&#39;id&#39;: 23, &#39;name&#39;: &#39;PNY Burger&#39;, &#39;restaurant&#39;: &#39;PNY Burger&#39;, &#39;web&#39;: &#39;https://pnyburger.com/&#39;, &#39;description&#39;: &#39;Home of the no bullshit burger&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;poutine&#39;, &#39;raclette cheese&#39;, &#39;honey mustard sauce&#39;, &#39;goats cheese&#39;, &#39;crispy onions&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;50&#39;, &#39;line1&#39;: &#39;rue de Cautartin&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75009&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;120&#39;, &#39;line1&#39;: &#39;rue du Faubourg St Antoine&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75012&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 2, &#39;number&#39;: &#39;1&#39;, &#39;line1&#39;: &#39;rue Perrée&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75003&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 3, &#39;number&#39;: &#39;96&#39;, &#39;line1&#39;: &#39;rue Oberkampf&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75011&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 4, &#39;number&#39;: &#39;24&#39;, &#39;line1&#39;: &#39;rue Pierre Fontaine&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75009&#39;, &#39;country&#39;: &#39;France&#39;}]}, {&#39;id&#39;: 24, &#39;name&#39;: &#39;231 East&#39;, &#39;restaurant&#39;: &#39;231 East Street&#39;, &#39;web&#39;: &#39;https://www.231-east.fr/&#39;, &#39;description&#39;: &#39;True New York style burger in France&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;smoked bacon&#39;, &#39;chicken&#39;, &#39;veggie burgers&#39;, &#39;brioche bun&#39;, &#39;honey mustard sauce&#39;, &#39;onion chutney&#39;, &#39;pepper sauce&#39;, &#39;avacado&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;7&#39;, &#39;line1&#39;: &#39;rue de la Couronne&#39;, &#39;line2&#39;: &#39;Aix-en-Provence&#39;, &#39;postcode&#39;: &#39;13100&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;9&#39;, &#39;line1&#39;: &#39;faubourg Sainte-Claire&#39;, &#39;line2&#39;: &#39;Annecy&#39;, &#39;postcode&#39;: &#39;7400&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 2, &#39;number&#39;: &#39;10&#39;, &#39;line1&#39;: &#39;Grande rue&#39;, &#39;line2&#39;: &#39;Grenoble&#39;, &#39;postcode&#39;: &#39;38000&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 3, &#39;number&#39;: &#39;2&#39;, &#39;line1&#39;: &#39;rue de la Pépinière&#39;, &#39;line2&#39;: &#39;Paris&#39;, &#39;postcode&#39;: &#39;75008&#39;, &#39;country&#39;: &#39;France&#39;}, {&#39;addressId&#39;: 4, &#39;number&#39;: &#39;&#39;, &#39;line1&#39;: &#39;boulevard Géneral de Gaulle&#39;, &#39;line2&#39;: &#39;Nantes&#39;, &#39;postcode&#39;: &#39;44000&#39;, &#39;country&#39;: &#39;France&#39;}]}, {&#39;id&#39;: 25, &#39;name&#39;: &#39;Cajun Black Bean Burger&#39;, &#39;restaurant&#39;: &#39;The Chicago Diner&#39;, &#39;web&#39;: &#39;www.veggiediner.com&#39;, &#39;description&#39;: &#39;a hearty veggie burger with a kick that goes great with sweet potato fries&#39;, &#39;ingredients&#39;: [&#39;spicy black bean veggie patty&#39;, &#39;sautéed onions&#39;, &#39;mushrooms&#39;, &#39;spinach&#39;, &#39;tomato&#39;, &#39;fried jalapeño&#39;, &#39;cheddar sauce&#39;, &#39;creole mustard&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;3411&#39;, &#39;line1&#39;: &#39;N Halsted St&#39;, &#39;line2&#39;: &#39;Chicago, Illinois&#39;, &#39;postcode&#39;: &#39;60657&#39;, &#39;country&#39;: &#39;USA&#39;}, {&#39;addressId&#39;: 1, &#39;number&#39;: &#39;2333&#39;, &#39;line1&#39;: &#39;N Milwaukee Ave&#39;, &#39;line2&#39;: &#39;Chicago, Illinois&#39;, &#39;postcode&#39;: &#39;60647&#39;, &#39;country&#39;: &#39;USA&#39;}]}, {&#39;id&#39;: 26, &#39;name&#39;: &#39;Hatch Green Chile Bacon Burger&#39;, &#39;restaurant&#39;: &#39;Whataburger&#39;, &#39;web&#39;: &#39;www.whataburger.com&#39;, &#39;description&#39;: &#39;burger with hatch green chiles, bacon and cheese&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;cheese&#39;, &#39;bacon&#39;, &#39;hatch green chiles&#39;, &#39;mayonnaise&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;984&#39;, &#39;line1&#39;: &#39;388 E Stacy Rd&#39;, &#39;line2&#39;: &#39;Allen, TX&#39;, &#39;postcode&#39;: &#39;75002&#39;, &#39;country&#39;: &#39;USA&#39;}]}, {&#39;id&#39;: 27, &#39;name&#39;: &#39;The Street Burgers and Coctail Bar Prague 1&#39;, &#39;restaurant&#39;: &#39;The Street&#39;, &#39;web&#39;: &#39;www.thestreet.cz&#39;, &#39;description&#39;: &#39;American, Bar, International, European, Vegetarian Friendly&#39;, &#39;ingredients&#39;: [&#39;beef&#39;, &#39;cheddar cheese&#39;, &#39;blue cheese&#39;, &#39;onion&#39;, &#39;mozzarella&#39;, &#39;bacon&#39;, &#39;lettuce&#39;], &#39;addresses&#39;: [{&#39;addressId&#39;: 0, &#39;number&#39;: &#39;11&#39;, &#39;line1&#39;: &#39;Konviktska&#39;, &#39;line2&#39;: &#39;Prague&#39;, &#39;postcode&#39;: &#39;110 00&#39;, &#39;country&#39;: &#39;The Czech Republic&#39;}]}] JSON data is Python type: &lt;class &#39;list&#39;&gt; .",
            "url": "https://chewyboba10.github.io/sushi-burrito/api/api-usage",
            "relUrl": "/api/api-usage",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;982d09f4b6msha36abf60bba5931p11f8b1jsn17c33bd8dbf4&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) # uncomment this line to see raw data #print(response.json()) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;asc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;982d09f4b6msha36abf60bba5931p11f8b1jsn17c33bd8dbf4&quot;, &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) # End Rapid API Code json = response.json() # convert response to python json object print(response.json()) # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#39;status&#39;: &#39;success&#39;, &#39;data&#39;: {&#39;stats&#39;: {&#39;total&#39;: 1477, &#39;totalCoins&#39;: 21269, &#39;totalMarkets&#39;: 29514, &#39;totalExchanges&#39;: 171, &#39;totalMarketCap&#39;: &#39;935253847516&#39;, &#39;total24hVolume&#39;: &#39;58645546097&#39;}, &#39;coins&#39;: [{&#39;uuid&#39;: &#39;fYNqTyYGQ&#39;, &#39;symbol&#39;: &#39;AUDAX&#39;, &#39;name&#39;: &#39;Audax&#39;, &#39;color&#39;: &#39;#cb45cc&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/gdHwdnTfV/logo-284x284.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000209370857763329&#39;, &#39;listedAt&#39;: 1563181140, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1505, &#39;sparkline&#39;: [&#39;0.000213758731162908&#39;, &#39;0.000213686159957697&#39;, &#39;0.000212799989911611&#39;, &#39;0.000211893971540763&#39;, &#39;0.000212443340301515&#39;, &#39;0.000212587360540117&#39;, &#39;0.000212813080717953&#39;, &#39;0.000213324660578628&#39;, &#39;0.000212741117463988&#39;, &#39;0.000212103768567423&#39;, &#39;0.000211725644815791&#39;, &#39;0.00021109189779478&#39;, &#39;0.000212038092816572&#39;, &#39;0.000211634397463013&#39;, &#39;0.000211499957127134&#39;, &#39;0.000211664930164564&#39;, &#39;0.000211478953674412&#39;, &#39;0.000210763741425564&#39;, &#39;0.000210838233026163&#39;, &#39;0.000209600418346337&#39;, &#39;0.000209431660890368&#39;, &#39;0.000209232541057301&#39;, &#39;0.000209558942020816&#39;, &#39;0.000209518009132602&#39;, &#39;0.00020947803382446&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/fYNqTyYGQ+audax-audax&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;1.0999332381e-8&#39;}, {&#39;uuid&#39;: &#39;cuPvJZZsffVr3&#39;, &#39;symbol&#39;: &#39;BOOT&#39;, &#39;name&#39;: &#39;BitcoinRebooted &#39;, &#39;color&#39;: &#39;#49bdd8&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/WQzZCePhf/BOOT_1563330941007_light.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.006631966623234944&#39;, &#39;listedAt&#39;: 1562331540, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.10&#39;, &#39;rank&#39;: 1504, &#39;sparkline&#39;: [&#39;0.006726298290195035&#39;, &#39;0.006724524523801024&#39;, &#39;0.006734353699067164&#39;, &#39;0.006721994586157316&#39;, &#39;0.006717103437384264&#39;, &#39;0.006718635615766802&#39;, &#39;0.006719356157353996&#39;, &#39;0.006719479826952159&#39;, &#39;0.006721963820411206&#39;, &#39;0.006722095242690485&#39;, &#39;0.006724264359922147&#39;, &#39;0.006721888522122108&#39;, &#39;0.00671441241564636&#39;, &#39;0.006722595570057798&#39;, &#39;0.006720296020148787&#39;, &#39;0.006718554530835028&#39;, &#39;0.006726003084497436&#39;, &#39;0.006729256768723362&#39;, &#39;0.006722646717921871&#39;, &#39;0.006732982642822591&#39;, &#39;0.006722792338867118&#39;, &#39;0.006721203538056495&#39;, &#39;0.006717867810476175&#39;, &#39;0.006721295914807176&#39;, &#39;0.006719641902702379&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/cuPvJZZsffVr3+bitcoinrebooted-boot&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;3.48411455193e-7&#39;}, {&#39;uuid&#39;: &#39;00143FdsSOmd&#39;, &#39;symbol&#39;: &#39;BC&#39;, &#39;name&#39;: &#39;Bitcoin Confidential&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/ZNnDh97xw/bc.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.013323635506265388&#39;, &#39;listedAt&#39;: 1561474380, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1503, &#39;sparkline&#39;: [&#39;0.013602814631205646&#39;, &#39;0.013598208228903893&#39;, &#39;0.013541817539829802&#39;, &#39;0.013484151833335827&#39;, &#39;0.013519121655550982&#39;, &#39;0.013528248692188246&#39;, &#39;0.013542652387374688&#39;, &#39;0.013575205673185447&#39;, &#39;0.01353807111134469&#39;, &#39;0.013497512545199666&#39;, &#39;0.013473450124641266&#39;, &#39;0.013433120768758754&#39;, &#39;0.01349336045298664&#39;, &#39;0.01346764347491902&#39;, &#39;0.013459088180817607&#39;, &#39;0.013469586465017681&#39;, &#39;0.013457751597462608&#39;, &#39;0.013412245341593946&#39;, &#39;0.013416993763514962&#39;, &#39;0.01333820844022145&#39;, &#39;0.013327468483901256&#39;, &#39;0.013314798067282774&#39;, &#39;0.013335569037688264&#39;, &#39;0.013332964217529237&#39;, &#39;0.01333042068180823&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/00143FdsSOmd+bitcoinconfidential-bc&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;6.99959378405e-7&#39;}, {&#39;uuid&#39;: &#39;9I0C0CCwF_Rd&#39;, &#39;symbol&#39;: &#39;SVR&#39;, &#39;name&#39;: &#39;SovranoCoin&#39;, &#39;color&#39;: &#39;#005fb1&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/KCxC1pJB3/4594.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.005329440015793822&#39;, &#39;listedAt&#39;: 1555426380, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1502, &#39;sparkline&#39;: [&#39;0.005441125852482258&#39;, &#39;0.005439283291561557&#39;, &#39;0.005416727015931921&#39;, &#39;0.005393664730128514&#39;, &#39;0.005407648662220393&#39;, &#39;0.005411314631930243&#39;, &#39;0.005417060236456995&#39;, &#39;0.005430082269274179&#39;, &#39;0.00541521616316729&#39;, &#39;0.005399005018079867&#39;, &#39;0.005389380049856506&#39;, &#39;0.005373248307503502&#39;, &#39;0.005397333271694564&#39;, &#39;0.005387057389967608&#39;, &#39;0.005383635272327043&#39;, &#39;0.005387834586007073&#39;, &#39;0.005383100638985043&#39;, &#39;0.005364895236287073&#39;, &#39;0.005366791386120509&#39;, &#39;0.00533528337608858&#39;, &#39;0.00533098773175483&#39;, &#39;0.00532591922691311&#39;, &#39;0.005334227615075306&#39;, &#39;0.005333185687011695&#39;, &#39;0.00533216813371352&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/9I0C0CCwF_Rd+sovranocoin-svr&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;2.79983006061e-7&#39;}, {&#39;uuid&#39;: &#39;58uJvk3vOkGf&#39;, &#39;symbol&#39;: &#39;MCN&#39;, &#39;name&#39;: &#39;MonetaVerde&#39;, &#39;color&#39;: &#39;#2ac27a&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/BImEmxkuc/423.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000190337143421208&#39;, &#39;listedAt&#39;: 1555279020, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1501, &#39;sparkline&#39;: [&#39;0.000194326119239007&#39;, &#39;0.000194260145416088&#39;, &#39;0.000193454536283283&#39;, &#39;0.000192630883218876&#39;, &#39;0.00019313004809434&#39;, &#39;0.000193261236854652&#39;, &#39;0.000193466437016321&#39;, &#39;0.000193931509616935&#39;, &#39;0.000193401015876353&#39;, &#39;0.000192821607788567&#39;, &#39;0.000192477858923447&#39;, &#39;0.000191901657599329&#39;, &#39;0.000192762292185523&#39;, &#39;0.000192394906784557&#39;, &#39;0.000192272688297394&#39;, &#39;0.000192422663785967&#39;, &#39;0.000192253594249466&#39;, &#39;0.000191603401295967&#39;, &#39;0.000191671303743695&#39;, &#39;0.000190545834860306&#39;, &#39;0.000190392418991244&#39;, &#39;0.000190211582706374&#39;, &#39;0.000190508129109832&#39;, &#39;0.000190470917393275&#39;, &#39;0.000190434576204054&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/58uJvk3vOkGf+monetaverde-mcn&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;9.999393074e-9&#39;}, {&#39;uuid&#39;: &#39;rL5brTWKayJU&#39;, &#39;symbol&#39;: &#39;HOSP&#39;, &#39;name&#39;: &#39;Hospital Coin&#39;, &#39;color&#39;: &#39;#70cce1&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/o512Nw0-e/Hospital_Coin.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.003806742868424158&#39;, &#39;listedAt&#39;: 1555278660, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1500, &#39;sparkline&#39;: [&#39;0.003886522384780138&#39;, &#39;0.003885202908321768&#39;, &#39;0.003869090725665658&#39;, &#39;0.00385261766437751&#39;, &#39;0.003862600961886805&#39;, &#39;0.003865224737093031&#39;, &#39;0.003869328740326425&#39;, &#39;0.003878630192338699&#39;, &#39;0.003868020317527054&#39;, &#39;0.003856432155771333&#39;, &#39;0.003849557178468933&#39;, &#39;0.003838033151986588&#39;, &#39;0.003855245843710468&#39;, &#39;0.003847898135691149&#39;, &#39;0.003845453765947888&#39;, &#39;0.003848453275719338&#39;, &#39;0.003845071884989317&#39;, &#39;0.003832068025919338&#39;, &#39;0.003833426074873899&#39;, &#39;0.003810916697206129&#39;, &#39;0.003807848379824879&#39;, &#39;0.00380423165412748&#39;, &#39;0.003810162582196647&#39;, &#39;0.003809418347865497&#39;, &#39;0.003808691524081086&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/rL5brTWKayJU+hospitalcoin-hosp&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;1.99987861472e-7&#39;}, {&#39;uuid&#39;: &#39;OtjXUM9ymkdI&#39;, &#39;symbol&#39;: &#39;PEOS&#39;, &#39;name&#39;: &#39;pEOS&#39;, &#39;color&#39;: &#39;#e82665&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/-Q7fMD4gj/3910.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000050305136193519&#39;, &#39;listedAt&#39;: 1554392340, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-8.66&#39;, &#39;rank&#39;: 1499, &#39;sparkline&#39;: [&#39;0.000055031768372273&#39;, &#39;0.000054900103357074&#39;, &#39;0.000054855900658322&#39;, &#39;0.000054100851561897&#39;, &#39;0.000054119048358096&#39;, &#39;0.000054268064810059&#39;, &#39;0.000054292930173305&#39;, &#39;0.000054274178778957&#39;, &#39;0.000054341197789956&#39;, &#39;0.000054311499113045&#39;, &#39;0.000054154464497366&#39;, &#39;0.000053975562537209&#39;, &#39;0.000054093025023126&#39;, &#39;0.000052052283875638&#39;, &#39;0.000051618934065208&#39;, &#39;0.000052189951362813&#39;, &#39;0.000052144687340496&#39;, &#39;0.00005216064133743&#39;, &#39;0.000052011997933339&#39;, &#39;0.000051928510990414&#39;, &#39;0.000051735051740392&#39;, &#39;0.00005111733713754&#39;, &#39;0.000051006186371748&#39;, &#39;0.000050438619103659&#39;, &#39;0.000050276965545434&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/OtjXUM9ymkdI+peos-peos&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;2.640236294e-9&#39;}, {&#39;uuid&#39;: &#39;NXE_WTIH4Diy&#39;, &#39;symbol&#39;: &#39;OPN&#39;, &#39;name&#39;: &#39;Openbit&#39;, &#39;color&#39;: &#39;#49bcd8&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/QZlPEiCWt/opn.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.002855057151318119&#39;, &#39;listedAt&#39;: 1553784480, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1498, &#39;sparkline&#39;: [&#39;0.002914891788585103&#39;, &#39;0.002913902181241326&#39;, &#39;0.002901818044249243&#39;, &#39;0.002889463248283132&#39;, &#39;0.002896950721415104&#39;, &#39;0.002898918552819773&#39;, &#39;0.002901996555244819&#39;, &#39;0.002908972644254024&#39;, &#39;0.002901015238145291&#39;, &#39;0.0028923241168285&#39;, &#39;0.0028871678838517&#39;, &#39;0.002878524863989941&#39;, &#39;0.002891434382782851&#39;, &#39;0.002885923601768362&#39;, &#39;0.002884090324460916&#39;, &#39;0.002886339956789503&#39;, &#39;0.002883803913741987&#39;, &#39;0.002874051019439504&#39;, &#39;0.002875069556155424&#39;, &#39;0.002858187522904597&#39;, &#39;0.002855886284868659&#39;, &#39;0.00285317374059561&#39;, &#39;0.002857621936647485&#39;, &#39;0.002857063760899122&#39;, &#39;0.002856518643060814&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/NXE_WTIH4Diy+openbit-opn&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;1.49990896104e-7&#39;}, {&#39;uuid&#39;: &#39;br5t9N75S_XQ&#39;, &#39;symbol&#39;: &#39;YOB&#39;, &#39;name&#39;: &#39;YOBANK&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Q6hQcT2s4/yobank.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.005329440015793822&#39;, &#39;listedAt&#39;: 1552760340, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1496, &#39;sparkline&#39;: [&#39;0.005441131338692193&#39;, &#39;0.005439284071650475&#39;, &#39;0.005416727015931921&#39;, &#39;0.005393664730128514&#39;, &#39;0.005407645246342297&#39;, &#39;0.005411314631930243&#39;, &#39;0.005417060236456995&#39;, &#39;0.005430082269274179&#39;, &#39;0.005415228444537876&#39;, &#39;0.005399005018079867&#39;, &#39;0.005389380049856506&#39;, &#39;0.005373248307503502&#39;, &#39;0.005397333271694564&#39;, &#39;0.005387057389967608&#39;, &#39;0.005383635272327043&#39;, &#39;0.005387834586007073&#39;, &#39;0.005383100638985043&#39;, &#39;0.005364895236287073&#39;, &#39;0.005366791386120509&#39;, &#39;0.00533528337608858&#39;, &#39;0.00533098773175483&#39;, &#39;0.005325924315778473&#39;, &#39;0.005334227615075306&#39;, &#39;0.005333185687011695&#39;, &#39;0.00533216813371352&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/br5t9N75S_XQ+yobank-yob&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;2.79983006061e-7&#39;}, {&#39;uuid&#39;: &#39;WuSl3eeO2Jt0&#39;, &#39;symbol&#39;: &#39;XGK&#39;, &#39;name&#39;: &#39;GoldKash&#39;, &#39;color&#39;: &#39;#fe9656&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/HgleTy8uZ/F8pONNqi_400x400.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;5.38895728835e-7&#39;, &#39;listedAt&#39;: 1551801840, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-4.60&#39;, &#39;rank&#39;: 1495, &#39;sparkline&#39;: [&#39;5.63121197205e-7&#39;, &#39;5.64128833518e-7&#39;, &#39;5.59049928349e-7&#39;, &#39;5.53176386556e-7&#39;, &#39;5.5372725086e-7&#39;, &#39;5.53989951592e-7&#39;, &#39;5.54470011629e-7&#39;, &#39;5.55992486006e-7&#39;, &#39;5.55094960954e-7&#39;, &#39;5.54561011569e-7&#39;, &#39;5.54879073795e-7&#39;, &#39;5.52600712858e-7&#39;, &#39;5.55291315461e-7&#39;, &#39;5.55475942081e-7&#39;, &#39;5.54367220634e-7&#39;, &#39;5.54214922642e-7&#39;, &#39;5.53793586377e-7&#39;, &#39;5.50182904887e-7&#39;, &#39;5.50580613265e-7&#39;, &#39;5.41074655211e-7&#39;, &#39;5.39033397999e-7&#39;, &#39;5.37397931231e-7&#39;, &#39;5.38344201313e-7&#39;, &#39;5.37974722649e-7&#39;, &#39;5.3788544454e-7&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/WuSl3eeO2Jt0+goldkash-xgk&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;2.8310976e-11&#39;}, {&#39;uuid&#39;: &#39;tsYwLMUHlEtr&#39;, &#39;symbol&#39;: &#39;ABET&#39;, &#39;name&#39;: &#39;Altbet&#39;, &#39;color&#39;: &#39;#ff0101&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/TVxx6o4vv/4502.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.001356101427182112&#39;, &#39;listedAt&#39;: 1551801480, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-3.56&#39;, &#39;rank&#39;: 1494, &#39;sparkline&#39;: [&#39;0.001405451416115903&#39;, &#39;0.001408070813688149&#39;, &#39;0.001409010444215722&#39;, &#39;0.001401318726287531&#39;, &#39;0.001380644215880953&#39;, &#39;0.001382566122545068&#39;, &#39;0.001382333441926341&#39;, &#39;0.001384669881453699&#39;, &#39;0.001385970264365085&#39;, &#39;0.001384247760273803&#39;, &#39;0.001386910141863791&#39;, &#39;0.001385357456520205&#39;, &#39;0.001380636276468808&#39;, &#39;0.001380326978048813&#39;, &#39;0.001386928529948894&#39;, &#39;0.001388794629561206&#39;, &#39;0.001385926788260496&#39;, &#39;0.00138469702100821&#39;, &#39;0.001383964756887188&#39;, &#39;0.00138383882298227&#39;, &#39;0.001384138567308433&#39;, &#39;0.001378658376529122&#39;, &#39;0.001373886788679475&#39;, &#39;0.001375644107524679&#39;, &#39;0.00137066128385834&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/tsYwLMUHlEtr+altbet-abet&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;7.1064034984e-8&#39;}, {&#39;uuid&#39;: &#39;jxWBqe7rwfzS&#39;, &#39;symbol&#39;: &#39;ETNXP&#39;, &#39;name&#39;: &#39;Electronero Pulse&#39;, &#39;color&#39;: &#39;#3E45AC&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/4E1UMVvqW/5669.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000007960237911789&#39;, &#39;listedAt&#39;: 1550831220, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1370.66&#39;, &#39;rank&#39;: 1493, &#39;sparkline&#39;: [&#39;5.40781696214e-7&#39;, &#39;5.41782266113e-7&#39;, &#39;5.36869012895e-7&#39;, &#39;5.31210590973e-7&#39;, &#39;5.31783908951e-7&#39;, &#39;5.32071576958e-7&#39;, &#39;5.32531509826e-7&#39;, &#39;5.33952202604e-7&#39;, &#39;5.33085356171e-7&#39;, &#39;5.325942296e-7&#39;, &#39;5.32983442906e-7&#39;, &#39;5.30691895049e-7&#39;, &#39;0.000004510145867205&#39;, &#39;0.000004515112573757&#39;, &#39;0.000004512309442855&#39;, &#39;0.000004511385050424&#39;, &#39;0.00000451595974754&#39;, &#39;0.00000451295283782&#39;, &#39;0.00000451047476498&#39;, &#39;0.000004506285506095&#39;, &#39;0.000004498625965748&#39;, &#39;0.000004495952691711&#39;, &#39;0.000004495330409286&#39;, &#39;0.000004496863113024&#39;, &#39;0.000004495717163163&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/jxWBqe7rwfzS+electroneropulse-etnxp&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;4.18192405e-10&#39;}, {&#39;uuid&#39;: &#39;2lXwQqlHiVe3&#39;, &#39;symbol&#39;: &#39;TNR&#39;, &#39;name&#39;: &#39;Tonestra&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/y61K2cKYf/tnr.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;1.9499875534e-8&#39;, &#39;listedAt&#39;: 1544817660, &#39;tier&#39;: 1, &#39;change&#39;: &#39;36.06&#39;, &#39;rank&#39;: 1492, &#39;sparkline&#39;: [&#39;1.4298764816e-8&#39;, &#39;1.4270224938e-8&#39;, &#39;1.4258531157e-8&#39;, &#39;1.4246025228e-8&#39;, &#39;1.4132004875e-8&#39;, &#39;1.3910688235e-8&#39;, &#39;1.3947692772e-8&#39;, &#39;1.3971654301e-8&#39;, &#39;1.3980071064e-8&#39;, &#39;1.3985529394e-8&#39;, &#39;1.3997757638e-8&#39;, &#39;1.4023597715e-8&#39;, &#39;1.4011162231e-8&#39;, &#39;1.4005766387e-8&#39;, &#39;1.403356257e-8&#39;, &#39;1.4008924167e-8&#39;, &#39;1.3992013327e-8&#39;, &#39;1.3962701246e-8&#39;, &#39;1.3922021928e-8&#39;, &#39;1.3949172908e-8&#39;, &#39;1.8535517524e-8&#39;, &#39;1.9463691286e-8&#39;, &#39;1.9458016874e-8&#39;, &#39;1.9463742065e-8&#39;, &#39;1.9505543164e-8&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/2lXwQqlHiVe3+tonestra-tnr&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;1.024612e-12&#39;}, {&#39;uuid&#39;: &#39;cdhFXkXV3mRP0&#39;, &#39;symbol&#39;: &#39;NOR&#39;, &#39;name&#39;: &#39;Noir&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/xEnOrtfZ8Vc/noir.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.005139102872372614&#39;, &#39;listedAt&#39;: 1542844800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1491, &#39;sparkline&#39;: [&#39;0.005246805219453186&#39;, &#39;0.005245023926234387&#39;, &#39;0.005223272479648638&#39;, &#39;0.005201033846909638&#39;, &#39;0.00521451505897293&#39;, &#39;0.005218053395075591&#39;, &#39;0.005223593799440674&#39;, &#39;0.005236150759657244&#39;, &#39;0.005221827428661523&#39;, &#39;0.0052061834102913&#39;, &#39;0.00519690219093306&#39;, &#39;0.005181346582235519&#39;, &#39;0.005204571369134044&#39;, &#39;0.005194662483183051&#39;, &#39;0.005191362584029648&#39;, &#39;0.005195411922221106&#39;, &#39;0.005190847044735577&#39;, &#39;0.005173291834991107&#39;, &#39;0.005175120265187633&#39;, &#39;0.005144737541228274&#39;, &#39;0.005140595312763586&#39;, &#39;0.005135707825951927&#39;, &#39;0.005143719485965473&#39;, &#39;0.00514271476961842&#39;, &#39;0.005141733557509466&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/cdhFXkXV3mRP0+noir-nor&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;2.69983612987e-7&#39;}, {&#39;uuid&#39;: &#39;htLu2sg2z0lUU&#39;, &#39;symbol&#39;: &#39;APR&#39;, &#39;name&#39;: &#39;APR Coin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/2eD2WvevrVG/apr-coin.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000647146287632107&#39;, &#39;listedAt&#39;: 1525996800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1489, &#39;sparkline&#39;: [&#39;0.000660708805412623&#39;, &#39;0.0006604844944147&#39;, &#39;0.000657745423363162&#39;, &#39;0.000654945002944177&#39;, &#39;0.000656642163520757&#39;, &#39;0.000657088205305815&#39;, &#39;0.000657785885855492&#39;, &#39;0.000659367132697579&#39;, &#39;0.000657563453979599&#39;, &#39;0.000655593466481127&#39;, &#39;0.000654424720339719&#39;, &#39;0.00065246563583772&#39;, &#39;0.00065539179343078&#39;, &#39;0.000654142683067495&#39;, &#39;0.000653727140211141&#39;, &#39;0.000654237056872287&#39;, &#39;0.000653662220448184&#39;, &#39;0.000651451564406288&#39;, &#39;0.000651682432728563&#39;, &#39;0.000647855838525042&#39;, &#39;0.000647334224570229&#39;, &#39;0.000646719381201672&#39;, &#39;0.00064772763897343&#39;, &#39;0.000647601119137134&#39;, &#39;0.000647477559093785&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/htLu2sg2z0lUU+aprcoin-apr&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;3.399793645e-8&#39;}, {&#39;uuid&#39;: &#39;Y9CMgc84ClW45&#39;, &#39;symbol&#39;: &#39;COI&#39;, &#39;name&#39;: &#39;Coinnec&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Jp0P906XrPc/coinnec.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;1.90341743653e-7&#39;, &#39;listedAt&#39;: 1518566400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.15&#39;, &#39;rank&#39;: 1488, &#39;sparkline&#39;: [&#39;1.93125826172e-7&#39;, &#39;1.93309469839e-7&#39;, &#39;1.93473182312e-7&#39;, &#39;1.93949432401e-7&#39;, &#39;1.93521635895e-7&#39;, &#39;1.92992134442e-7&#39;, &#39;1.92799819613e-7&#39;, &#39;1.92341305902e-7&#39;, &#39;1.91831227667e-7&#39;, &#39;1.92716979851e-7&#39;, &#39;1.9253026212e-7&#39;, &#39;1.92263561389e-7&#39;, &#39;1.9232701021e-7&#39;, &#39;1.92420639105e-7&#39;, &#39;1.92418963062e-7&#39;, &#39;1.91658926645e-7&#39;, &#39;1.91708001542e-7&#39;, &#39;1.91255821805e-7&#39;, &#39;1.90472014053e-7&#39;, &#39;1.9041647682e-7&#39;, &#39;1.90189054367e-7&#39;, &#39;1.90418420481e-7&#39;, &#39;1.90509404292e-7&#39;, &#39;1.90441636943e-7&#39;, &#39;1.90449001668e-7&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Y9CMgc84ClW45+coinnec-coi&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;1.0001415e-11&#39;}, {&#39;uuid&#39;: &#39;b1fAR3-FKqg3y&#39;, &#39;symbol&#39;: &#39;SEND&#39;, &#39;name&#39;: &#39;Social Send&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/CJ_8mMt1or9/social-send.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000837492340687405&#39;, &#39;listedAt&#39;: 1512604800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-4.61&#39;, &#39;rank&#39;: 1486, &#39;sparkline&#39;: [&#39;0.000850433669207117&#39;, &#39;0.000848312390675045&#39;, &#39;0.000847976772651639&#39;, &#39;0.000845660861547041&#39;, &#39;0.000844028853057479&#39;, &#39;0.000847808846339252&#39;, &#39;0.000847965727059444&#39;, &#39;0.000845858112258732&#39;, &#39;0.000845904507400248&#39;, &#39;0.000846477571394804&#39;, &#39;0.000846803372542177&#39;, &#39;0.000846743847483717&#39;, &#39;0.000843431866720465&#39;, &#39;0.000842966569155172&#39;, &#39;0.000843801089726091&#39;, &#39;0.000841061390586236&#39;, &#39;0.000838193262370892&#39;, &#39;0.000838102769253497&#39;, &#39;0.000837201055839038&#39;, &#39;0.000836685202659614&#39;, &#39;0.000837852210515573&#39;, &#39;0.000838409330402178&#39;, &#39;0.000838190627891593&#39;, &#39;0.000837550736013228&#39;, &#39;0.000838167415002191&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/b1fAR3-FKqg3y+socialsend-send&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;4.3997797593e-8&#39;}, {&#39;uuid&#39;: &#39;kpHamxaeamGVC&#39;, &#39;symbol&#39;: &#39;GLT&#39;, &#39;name&#39;: &#39;GlobalToken&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/jInwKn4GcYi/globaltoken.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000171303429079087&#39;, &#39;listedAt&#39;: 1497830400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1485, &#39;sparkline&#39;: [&#39;0.000174893507315106&#39;, &#39;0.00017483413087448&#39;, &#39;0.000174109082654954&#39;, &#39;0.000173367794896988&#39;, &#39;0.000173817043284906&#39;, &#39;0.000173935113169186&#39;, &#39;0.000174119793314689&#39;, &#39;0.000174538358655242&#39;, &#39;0.000174060914288718&#39;, &#39;0.00017353944700971&#39;, &#39;0.000173230073031102&#39;, &#39;0.000172711491839396&#39;, &#39;0.000173486062966971&#39;, &#39;0.000173155416106102&#39;, &#39;0.000173045425623188&#39;, &#39;0.00017318039740737&#39;, &#39;0.000173028234824519&#39;, &#39;0.00017244306116637&#39;, &#39;0.000172504173369326&#39;, &#39;0.000171491251374276&#39;, &#39;0.00017135317709212&#39;, &#39;0.000171190424435737&#39;, &#39;0.000171457316198849&#39;, &#39;0.000171423825653947&#39;, &#39;0.000171391118583649&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/kpHamxaeamGVC+globaltoken-glt&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;8.999453766e-9&#39;}, {&#39;uuid&#39;: &#39;_rfn6Am9rkEhy&#39;, &#39;symbol&#39;: &#39;GUN&#39;, &#39;name&#39;: &#39;GunCoin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/BJjQnHg67/gun.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000039905572762746&#39;, &#39;listedAt&#39;: 1399766400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-6.33&#39;, &#39;rank&#39;: 1481, &#39;sparkline&#39;: [&#39;0.000042579082295882&#39;, &#39;0.000042674829978899&#39;, &#39;0.000042272750596784&#39;, &#39;0.00004185914345387&#39;, &#39;0.000041895334782429&#39;, &#39;0.000041926498011725&#39;, &#39;0.000042114231530258&#39;, &#39;0.000042284764583464&#39;, &#39;0.000041966970808962&#39;, &#39;0.000041638853571299&#39;, &#39;0.000041655561911523&#39;, &#39;0.000041494317860988&#39;, &#39;0.00004168728791626&#39;, &#39;0.000041734609817324&#39;, &#39;0.000041679335838338&#39;, &#39;0.000041669011887752&#39;, &#39;0.00004162987932883&#39;, &#39;0.000041324831458103&#39;, &#39;0.000041327349284216&#39;, &#39;0.00004059567317612&#39;, &#39;0.000040504440203139&#39;, &#39;0.00004023748366833&#39;, &#39;0.000040288543756198&#39;, &#39;0.000040273921891451&#39;, &#39;0.000040278125675979&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/_rfn6Am9rkEhy+guncoin-gun&#39;, &#39;24hVolume&#39;: &#39;0&#39;, &#39;btcPrice&#39;: &#39;2.096819087e-9&#39;}, {&#39;uuid&#39;: &#39;DKNkOIfAiPJB&#39;, &#39;symbol&#39;: &#39;HATCH&#39;, &#39;name&#39;: &#39;Hatch&#39;, &#39;color&#39;: &#39;#0037ae&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/txhGRJgGU/4185.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.002000424103697995&#39;, &#39;listedAt&#39;: 1646032077, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.18&#39;, &#39;rank&#39;: 1478, &#39;sparkline&#39;: [&#39;0.002001997607193501&#39;, &#39;0.001999668892901689&#39;, &#39;0.002000980046976062&#39;, &#39;0.001998993513446166&#39;, &#39;0.001998892422475155&#39;, &#39;0.001999983983051072&#39;, &#39;0.001997311101291777&#39;, &#39;0.002001657285676489&#39;, &#39;0.00199961766991176&#39;, &#39;0.002001970230298233&#39;, &#39;0.002001099713306503&#39;, &#39;0.001996545897329411&#39;, &#39;0.001995211121528687&#39;, &#39;0.002000041225524234&#39;, &#39;0.002001096774729764&#39;, &#39;0.001999109618694108&#39;, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/DKNkOIfAiPJB+hatch-hatch&#39;, &#39;24hVolume&#39;: &#39;1&#39;, &#39;btcPrice&#39;: &#39;1.05055836161e-7&#39;}, {&#39;uuid&#39;: &#39;9XiEBYNCVWoo&#39;, &#39;symbol&#39;: &#39;BPESO&#39;, &#39;name&#39;: &#39;BitcoinPeso&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/nIph_YGzB2v/bitcoinpeso.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000190341743653076&#39;, &#39;listedAt&#39;: 1545098460, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-6.36&#39;, &#39;rank&#39;: 1477, &#39;sparkline&#39;: [&#39;0.000193125826171755&#39;, &#39;0.00019330946983854&#39;, &#39;0.000193473182311765&#39;, &#39;0.000193949432400879&#39;, &#39;0.000193521635894673&#39;, &#39;0.00019299213444157&#39;, &#39;0.000192799819612421&#39;, &#39;0.00019234130590158&#39;, &#39;0.000191831227667292&#39;, &#39;0.000192716979851129&#39;, &#39;0.000192530262119473&#39;, &#39;0.000192263561388728&#39;, &#39;0.000192327010209558&#39;, &#39;0.000192420639105223&#39;, &#39;0.000192418963061864&#39;, &#39;0.000191658926645511&#39;, &#39;0.000191708001541621&#39;, &#39;0.0001912558218049&#39;, &#39;0.000190472014053251&#39;, &#39;0.000190416476820066&#39;, &#39;0.000190189054367157&#39;, &#39;0.00019041842048128&#39;, &#39;0.000190509404292334&#39;, &#39;0.000190441636942695&#39;, &#39;0.000190449001668047&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/9XiEBYNCVWoo+bitcoinpeso-bpeso&#39;, &#39;24hVolume&#39;: &#39;1&#39;, &#39;btcPrice&#39;: &#39;1.0001415179e-8&#39;}, {&#39;uuid&#39;: &#39;9iUWqfeP1oSq&#39;, &#39;symbol&#39;: &#39;EXO&#39;, &#39;name&#39;: &#39;Exosis&#39;, &#39;color&#39;: &#39;#39ace2&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/QAkUUOgpA/exo.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.031025284439101606&#39;, &#39;listedAt&#39;: 1544778840, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-18.99&#39;, &#39;rank&#39;: 1476, &#39;sparkline&#39;: [&#39;0.0313404232032946&#39;, &#39;0.03136126919611688&#39;, &#39;0.03135849124528084&#39;, &#39;0.03137572257829928&#39;, &#39;0.03136464660809588&#39;, &#39;0.031268656148368705&#39;, &#39;0.031239104042750526&#39;, &#39;0.031229787560411382&#39;, &#39;0.031260463759040735&#39;, &#39;0.031238410436312116&#39;, &#39;0.031095965879024277&#39;, &#39;0.03105090440929666&#39;, &#39;0.031042138482929756&#39;, &#39;0.031044331918335104&#39;, &#39;0.031009979061976577&#39;, &#39;0.03098671806052058&#39;, &#39;0.031020996204957504&#39;, &#39;0.03104985651093012&#39;, &#39;0.03106042393367323&#39;, &#39;0.03105588842200651&#39;, &#39;0.031050365808418898&#39;, &#39;0.03104231556350417&#39;, &#39;0.03102950510770711&#39;, &#39;0.031032556266052003&#39;, &#39;0.031058204144194124&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/9iUWqfeP1oSq+exosis-exo&#39;, &#39;24hVolume&#39;: &#39;1&#39;, &#39;btcPrice&#39;: &#39;0.00000162991841083&#39;}, {&#39;uuid&#39;: &#39;p7VD1xOWgroAy&#39;, &#39;symbol&#39;: &#39;RISE&#39;, &#39;name&#39;: &#39;Rise&#39;, &#39;color&#39;: &#39;#2ac27a&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/ryJ6Xr9NM/rise.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000502057387843636&#39;, &#39;listedAt&#39;: 1466726400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.15&#39;, &#39;rank&#39;: 1475, &#39;sparkline&#39;: [&#39;0.000502477537124033&#39;, &#39;0.000502350397285796&#39;, &#39;0.000503063400679706&#39;, &#39;0.000502099320624777&#39;, &#39;0.000501818330122962&#39;, &#39;0.000501915834407954&#39;, &#39;0.000501949648680435&#39;, &#39;0.000501957049762566&#39;, &#39;0.00050216286940404&#39;, &#39;0.000502165862205626&#39;, &#39;0.000502251739114837&#39;, &#39;0.000502102045597596&#39;, &#39;0.00050159745962915&#39;, &#39;0.000502156726630903&#39;, &#39;0.000501986672275985&#39;, &#39;0.000501899291226145&#39;, &#39;0.00050241370458151&#39;, &#39;0.000502612403824419&#39;, &#39;0.000502206022952861&#39;, &#39;0.000502846606330643&#39;, &#39;0.000502132802753807&#39;, &#39;0.000501993923078374&#39;, &#39;0.000501818433228794&#39;, &#39;0.000502065295408974&#39;, &#39;0.000501896709710076&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/p7VD1xOWgroAy+rise-rise&#39;, &#39;24hVolume&#39;: &#39;1&#39;, &#39;btcPrice&#39;: &#39;2.637692344e-8&#39;}, {&#39;uuid&#39;: &#39;SNnn13b3diN6f&#39;, &#39;symbol&#39;: &#39;MEME&#39;, &#39;name&#39;: &#39;Pepe&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/l4XrqHA7Gf/pepe.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.06114692460921706&#39;, &#39;listedAt&#39;: 1458518400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-1.41&#39;, &#39;rank&#39;: 1474, &#39;sparkline&#39;: [&#39;0.06199733376096506&#39;, &#39;0.06196175951233302&#39;, &#39;0.061983718796060225&#39;, &#39;0.06162333264386487&#39;, &#39;0.0614414005515081&#39;, &#39;0.061565224857244125&#39;, &#39;0.06159948954193901&#39;, &#39;0.061664289708126825&#39;, &#39;0.06169682995063914&#39;, &#39;0.061848755757516374&#39;, &#39;0.06180667239025303&#39;, &#39;0.06165725897779639&#39;, &#39;0.06150064131085872&#39;, &#39;0.061484250044737725&#39;, &#39;0.06133205998963263&#39;, &#39;0.061176702193234477&#39;, &#39;0.0614493025316315&#39;, &#39;0.06147560855593712&#39;, &#39;0.06132981324003619&#39;, &#39;0.061333052241169576&#39;, &#39;0.06136429114952547&#39;, &#39;0.06139669497800536&#39;, &#39;0.06134984402631254&#39;, &#39;0.06113268224497452&#39;, &#39;0.06115079089670941&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/SNnn13b3diN6f+pepe-meme&#39;, &#39;24hVolume&#39;: &#39;1&#39;, &#39;btcPrice&#39;: &#39;0.000003189146635932&#39;}, {&#39;uuid&#39;: &#39;cAseUU0rYcoOc&#39;, &#39;symbol&#39;: &#39;NVC&#39;, &#39;name&#39;: &#39;NovaCoin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/HkCaHv_dZ/nvc.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.01854301118322348&#39;, &#39;listedAt&#39;: 1403049600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;31.20&#39;, &#39;rank&#39;: 1473, &#39;sparkline&#39;: [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/cAseUU0rYcoOc+novacoin-nvc&#39;, &#39;24hVolume&#39;: &#39;2&#39;, &#39;btcPrice&#39;: &#39;9.73819272225e-7&#39;}, {&#39;uuid&#39;: &#39;e5EQZdtD-aqLY&#39;, &#39;symbol&#39;: &#39;MORE&#39;, &#39;name&#39;: &#39;More Coin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Q5JVCw9WCi3/more-coin.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.013704605543021454&#39;, &#39;listedAt&#39;: 1529712000, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-11.04&#39;, &#39;rank&#39;: 1472, &#39;sparkline&#39;: [&#39;0.013988268646270757&#39;, &#39;0.013988692572459206&#39;, &#39;0.013877826340483696&#39;, &#39;0.013886410176198502&#39;, &#39;0.013903652777165251&#39;, &#39;0.013921784251107796&#39;, &#39;0.013936450459616551&#39;, &#39;0.013962470842924218&#39;, &#39;0.01391849628198246&#39;, &#39;0.013882397091111238&#39;, &#39;0.013860134260073523&#39;, &#39;0.013816998603941153&#39;, &#39;0.013872214716224462&#39;, &#39;0.013855698178173621&#39;, &#39;0.013843925095305085&#39;, &#39;0.013852481230153327&#39;, &#39;0.013854855017985156&#39;, &#39;0.013798277868297031&#39;, &#39;0.01379693174522221&#39;, &#39;0.013720637763384967&#39;, &#39;0.013708633642994194&#39;, &#39;0.013695641026601285&#39;, &#39;0.013716254609120761&#39;, &#39;0.013713336372161366&#39;, &#39;0.013711001625167253&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/e5EQZdtD-aqLY+morecoin-more&#39;, &#39;24hVolume&#39;: &#39;3&#39;, &#39;btcPrice&#39;: &#39;7.20101892922e-7&#39;}, {&#39;uuid&#39;: &#39;k828ut4b&#39;, &#39;symbol&#39;: &#39;YAP&#39;, &#39;name&#39;: &#39;YAP STONE&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/F0TfmGvWF/yap.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.001910405019031585&#39;, &#39;listedAt&#39;: 1572958200, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.18&#39;, &#39;rank&#39;: 1471, &#39;sparkline&#39;: [&#39;0.001911907714869793&#39;, &#39;0.001909683792721113&#39;, &#39;0.001910935944862139&#39;, &#39;0.001909038805341089&#39;, &#39;0.001908942263463773&#39;, &#39;0.001909984703813773&#39;, &#39;0.001907432101733647&#39;, &#39;0.001911582707821047&#39;, &#39;0.001909634874765731&#39;, &#39;0.001911881569934813&#39;, &#39;0.001911050226207711&#39;, &#39;0.001906701331949588&#39;, &#39;0.001905426621059896&#39;, &#39;0.001910039370375644&#39;, &#39;0.001911047419866925&#39;, &#39;0.001909149685852873&#39;, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/k828ut4b+yapstone-yap&#39;, &#39;24hVolume&#39;: &#39;4&#39;, &#39;btcPrice&#39;: &#39;1.00328323534e-7&#39;}, {&#39;uuid&#39;: &#39;8EOiMbVD_r71T&#39;, &#39;symbol&#39;: &#39;SPHR&#39;, &#39;name&#39;: &#39;Sphere Coin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/4kr3S0UafJ2/sphere-coin.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.007804011489776106&#39;, &#39;listedAt&#39;: 1430352000, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1470, &#39;sparkline&#39;: [&#39;0.007967092694458394&#39;, &#39;0.007965162357886739&#39;, &#39;0.007931879586938919&#39;, &#39;0.007898070642537489&#39;, &#39;0.00791764130486626&#39;, &#39;0.007923519849645327&#39;, &#39;0.007932930784157242&#39;, &#39;0.007950191650781691&#39;, &#39;0.007927356091999318&#39;, &#39;0.00790525389910501&#39;, &#39;0.007892576453652978&#39;, &#39;0.007868013093910935&#39;, &#39;0.007899455602294485&#39;, &#39;0.00789005035145998&#39;, &#39;0.007883346234826507&#39;, &#39;0.007888218478281755&#39;, &#39;0.00788957021857488&#39;, &#39;0.007857352675002476&#39;, &#39;0.007856586132695981&#39;, &#39;0.007813140948594217&#39;, &#39;0.007806305268927249&#39;, &#39;0.00779890669570351&#39;, &#39;0.007810644985749323&#39;, &#39;0.007808983211925222&#39;, &#39;0.007807653703220242&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/8EOiMbVD_r71T+spherecoin-sphr&#39;, &#39;24hVolume&#39;: &#39;6&#39;, &#39;btcPrice&#39;: &#39;4.10058022358e-7&#39;}, {&#39;uuid&#39;: &#39;gAcPTtQT&#39;, &#39;symbol&#39;: &#39;GRIMM&#39;, &#39;name&#39;: &#39;Grimm&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/FRKlvl5RV/4866.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.0699551599186027&#39;, &#39;listedAt&#39;: 1570806420, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.16&#39;, &#39;rank&#39;: 1469, &#39;sparkline&#39;: [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/gAcPTtQT+grimm-grimm&#39;, &#39;24hVolume&#39;: &#39;7&#39;, &#39;btcPrice&#39;: &#39;0.000003673819869233&#39;}, {&#39;uuid&#39;: &#39;KdRlEzu26D8Y&#39;, &#39;symbol&#39;: &#39;XQR&#39;, &#39;name&#39;: &#39;Qredit&#39;, &#39;color&#39;: &#39;#ed4f82&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/36Qb3hA8e/3821.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.003426068581581743&#39;, &#39;listedAt&#39;: 1554218580, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1468, &#39;sparkline&#39;: [&#39;0.00335211668524106&#39;, &#39;0.003448133546118308&#39;, &#39;0.003434105290735045&#39;, &#39;0.003371055523854373&#39;, &#39;0.003379803843242702&#39;, &#39;0.003382047709679865&#39;, &#39;0.003434050169325903&#39;, &#39;0.003490767173104829&#39;, &#39;0.003432919402732417&#39;, &#39;0.003277967332405634&#39;, &#39;0.003416413588370246&#39;, &#39;0.003454231054823679&#39;, &#39;0.003469721259339422&#39;, &#39;0.003463108322122034&#39;, &#39;0.003460903363561047&#39;, &#39;0.003393608772082734&#39;, &#39;0.003425570539281409&#39;, &#39;0.003414020469873923&#39;, &#39;0.003380346323203829&#39;, &#39;0.003325923131735475&#39;, &#39;0.00342706056992222&#39;, &#39;0.003423805217301284&#39;, &#39;0.003273256405517292&#39;, &#39;0.003376521811093413&#39;, &#39;0.003427822461036402&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/KdRlEzu26D8Y+qredit-xqr&#39;, &#39;24hVolume&#39;: &#39;12&#39;, &#39;btcPrice&#39;: &#39;1.79989075325e-7&#39;}, {&#39;uuid&#39;: &#39;d6UohiNz99VG_&#39;, &#39;symbol&#39;: &#39;XSH&#39;, &#39;name&#39;: &#39;SHIELD&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/B148rB9Vz/xsh.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000118645769448109&#39;, &#39;listedAt&#39;: 1509753600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-12.82&#39;, &#39;rank&#39;: 1467, &#39;sparkline&#39;: [&#39;0.000136023533807826&#39;, &#39;0.000135990554345638&#39;, &#39;0.000135422334411152&#39;, &#39;0.000130535788240806&#39;, &#39;0.000112666638073958&#39;, &#39;0.000109328393866764&#39;, &#39;0.000105981604493788&#39;, &#39;0.000106127811999412&#39;, &#39;0.000106015046141951&#39;, &#39;0.000105878440092684&#39;, &#39;0.000105854475808871&#39;, &#39;0.000105619252290464&#39;, &#39;0.000105866717678459&#39;, &#39;0.000105841651443372&#39;, &#39;0.000105765288472421&#39;, &#39;0.000105770590184549&#39;, &#39;0.000104277966349954&#39;, &#39;0.000097117682890395&#39;, &#39;0.000097091101622386&#39;, &#39;0.000097788155059463&#39;, &#39;0.000097613919499649&#39;, &#39;0.000097817975843308&#39;, &#39;0.000098006360611715&#39;, &#39;0.000097740199355038&#39;, &#39;0.000097429838332967&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/d6UohiNz99VG_+shield-xsh&#39;, &#39;24hVolume&#39;: &#39;13&#39;, &#39;btcPrice&#39;: &#39;6.234184771e-9&#39;}, {&#39;uuid&#39;: &#39;kDDoiqG4W6s&#39;, &#39;symbol&#39;: &#39;INNBC&#39;, &#39;name&#39;: &#39; Innovative Bioresearch Coin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/3oSm7vNHl/innovative-bioresearch-coin.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;2.0000086296e-8&#39;, &#39;listedAt&#39;: 1545390060, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.19&#39;, &#39;rank&#39;: 1466, &#39;sparkline&#39;: [&#39;2.0020182032e-8&#39;, &#39;2.0014665219e-8&#39;, &#39;2.0044367526e-8&#39;, &#39;2.0003658028e-8&#39;, &#39;1.9991994919e-8&#39;, &#39;1.9996733386e-8&#39;, &#39;1.9999130926e-8&#39;, &#39;2.0000759033e-8&#39;, &#39;2.0006807248e-8&#39;, &#39;2.0005844565e-8&#39;, &#39;2.0011642245e-8&#39;, &#39;2.0003447793e-8&#39;, &#39;1.9984047442e-8&#39;, &#39;2.0007857795e-8&#39;, &#39;1.9999290844e-8&#39;, &#39;1.9995643284e-8&#39;, &#39;2.0020122276e-8&#39;, &#39;2.0022706221e-8&#39;, &#39;2.0008294824e-8&#39;, &#39;2.0033640368e-8&#39;, &#39;2.0004808606e-8&#39;, &#39;1.9999448483e-8&#39;, &#39;1.9991473249e-8&#39;, &#39;2.0001107212e-8&#39;, &#39;1.9996201512e-8&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/kDDoiqG4W6s+innovativebioresearchcoin-innbc&#39;, &#39;24hVolume&#39;: &#39;16&#39;, &#39;btcPrice&#39;: &#39;1.050708e-12&#39;}, {&#39;uuid&#39;: &#39;9KoB2vsXgpfp&#39;, &#39;symbol&#39;: &#39;XGG&#39;, &#39;name&#39;: &#39;Going Gems&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/tM0p4PBZV4v/going-gems.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.0298726064219188&#39;, &#39;listedAt&#39;: 1544786940, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.19&#39;, &#39;rank&#39;: 1465, &#39;sparkline&#39;: [&#39;0.02989869514457365&#39;, &#39;0.02989103628002336&#39;, &#39;0.02993101217043614&#39;, &#39;0.029879528665319247&#39;, &#39;0.0298591067152713&#39;, &#39;0.02986594194469367&#39;, &#39;0.029865944367181714&#39;, &#39;0.029870711737271807&#39;, &#39;0.029879000249535596&#39;, &#39;0.029883612297529377&#39;, &#39;0.029883723263749214&#39;, &#39;0.0298764779358118&#39;, &#39;0.029843894173827053&#39;, &#39;0.029878634201994388&#39;, &#39;0.029868481805073028&#39;, &#39;0.029864506917828434&#39;, &#39;0.02989260402286373&#39;, &#39;0.029908070369545865&#39;, &#39;0.029882009734346338&#39;, &#39;0.029914068001978267&#39;, &#39;0.02987847949867109&#39;, &#39;0.029870619527073018&#39;, &#39;0.029857951934338486&#39;, &#39;0.029873924813475675&#39;, &#39;0.029865003587501267&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/9KoB2vsXgpfp+goinggems-xgg&#39;, &#39;24hVolume&#39;: &#39;17&#39;, &#39;btcPrice&#39;: &#39;0.000001569437023761&#39;}, {&#39;uuid&#39;: &#39;ugHHr58GbHNgR&#39;, &#39;symbol&#39;: &#39;EXCL&#39;, &#39;name&#39;: &#39;Exclusive Coin&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/qg0ee-keMm/exclusive-coin.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.010849479388225319&#39;, &#39;listedAt&#39;: 1421712000, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.10&#39;, &#39;rank&#39;: 1464, &#39;sparkline&#39;: [&#39;0.011076202038637278&#39;, &#39;0.011073518399988882&#39;, &#39;0.0110272472306224&#39;, &#39;0.010980244551820412&#39;, &#39;0.010878743688651877&#39;, &#39;0.010629111993426659&#39;, &#39;0.01064173641777191&#39;, &#39;0.010664891238853488&#39;, &#39;0.010634258172194207&#39;, &#39;0.010604608889043307&#39;, &#39;0.010587602559778387&#39;, &#39;0.010554651711343937&#39;, &#39;0.010596830686004798&#39;, &#39;0.01058421388610485&#39;, &#39;0.010575220558913608&#39;, &#39;0.010686737335714895&#39;, &#39;0.010968426889238249&#39;, &#39;0.01092363664573515&#39;, &#39;0.010922570964967583&#39;, &#39;0.010862171562679766&#39;, &#39;0.010852668300703736&#39;, &#39;0.010842382479392685&#39;, &#39;0.010858701565553937&#39;, &#39;0.010856391294627748&#39;, &#39;0.010854542953257409&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/ugHHr58GbHNgR+exclusivecoin-excl&#39;, &#39;24hVolume&#39;: &#39;20&#39;, &#39;btcPrice&#39;: &#39;5.7008066523e-7&#39;}, {&#39;uuid&#39;: &#39;tBbVxV9pmmzlA&#39;, &#39;symbol&#39;: &#39;BTCR&#39;, &#39;name&#39;: &#39;BitCurrency&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/D1knZEEJul/bitcurrency.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.009849458832958898&#39;, &#39;listedAt&#39;: 1495756800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-3.85&#39;, &#39;rank&#39;: 1463, &#39;sparkline&#39;: [&#39;0.01166976125308869&#39;, &#39;0.011588964044811367&#39;, &#39;0.01162813039682075&#39;, &#39;0.011643443293036347&#39;, &#39;0.01165629481443631&#39;, &#39;0.011657576036655985&#39;, &#39;0.011674833264572936&#39;, &#39;0.011585659954572183&#39;, &#39;0.01158836487399438&#39;, &#39;0.011535291398766996&#39;, &#39;0.011532992123223913&#39;, &#39;0.0115620110438043&#39;, &#39;0.01160914650036244&#39;, &#39;0.011598167037568058&#39;, &#39;0.011564109929614184&#39;, &#39;0.011325830879916635&#39;, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/tBbVxV9pmmzlA+bitcurrency-btcr&#39;, &#39;24hVolume&#39;: &#39;29&#39;, &#39;btcPrice&#39;: &#39;5.17261880379e-7&#39;}, {&#39;uuid&#39;: &#39;0ltXI_jLXJRuS&#39;, &#39;symbol&#39;: &#39;BSTY&#39;, &#39;name&#39;: &#39;GlobalBoost-Y&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/jE3b0Qzpj0J/globalboost.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.007613566733521867&#39;, &#39;listedAt&#39;: 1410307200, &#39;tier&#39;: 1, &#39;change&#39;: &#39;13.41&#39;, &#39;rank&#39;: 1462, &#39;sparkline&#39;: [&#39;0.007326951925709204&#39;, &#39;0.007439148050602255&#39;, &#39;0.007322424411751211&#39;, &#39;0.006938391908634868&#39;, &#39;0.007277636317265672&#39;, &#39;0.008769298244288074&#39;, &#39;0.007990164313205686&#39;, &#39;0.007556127616614907&#39;, &#39;0.007599477653473177&#39;, &#39;0.007330666955336348&#39;, &#39;0.007647669343818224&#39;, &#39;0.007333674424960351&#39;, &#39;0.007344532335683065&#39;, &#39;0.007665564358562972&#39;, &#39;0.007645145035310188&#39;, &#39;0.007623027798719986&#39;, &#39;0.007311758811708942&#39;, &#39;0.007582821329579033&#39;, &#39;0.007541523913168529&#39;, &#39;0.00761840266868298&#39;, &#39;0.007608031363247809&#39;, &#39;0.007613541313204673&#39;, &#39;0.007621326582632191&#39;, &#39;0.007713299782075007&#39;, &#39;0.00761792382672583&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/0ltXI_jLXJRuS+globalboost-y-bsty&#39;, &#39;24hVolume&#39;: &#39;30&#39;, &#39;btcPrice&#39;: &#39;3.99979978118e-7&#39;}, {&#39;uuid&#39;: &#39;NMbkyaCf4rWjJ&#39;, &#39;symbol&#39;: &#39;CURE&#39;, &#39;name&#39;: &#39;Curecoin&#39;, &#39;color&#39;: &#39;#2563b0&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/N_mfFHsEa/333.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.009326745439000712&#39;, &#39;listedAt&#39;: 1422748800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.06&#39;, &#39;rank&#39;: 1461, &#39;sparkline&#39;: [&#39;0.009327328032536655&#39;, &#39;0.009325068126306426&#39;, &#39;0.009286102931050443&#39;, &#39;0.009246521727848768&#39;, &#39;0.009269433722770256&#39;, &#39;0.009453474619664214&#39;, &#39;0.009480819717651337&#39;, &#39;0.00950144855825129&#39;, &#39;0.009474867447331278&#39;, &#39;0.009447265371033426&#39;, &#39;0.009430648819210356&#39;, &#39;0.00940270780255644&#39;, &#39;0.009444235342110993&#39;, &#39;0.009426398838451838&#39;, &#39;0.009421464228024055&#39;, &#39;0.009427943756298802&#39;, &#39;0.00942377944273802&#39;, &#39;0.009389280130970217&#39;, &#39;0.00939104974357501&#39;, &#39;0.009338870414804796&#39;, &#39;0.009329478285201528&#39;, &#39;0.009320215608717299&#39;, &#39;0.009334301485198747&#39;, &#39;0.009332427583948357&#39;, &#39;0.00933083506597448&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/NMbkyaCf4rWjJ+curecoin-cure&#39;, &#39;24hVolume&#39;: &#39;36&#39;, &#39;btcPrice&#39;: &#39;4.90069343794e-7&#39;}, {&#39;uuid&#39;: &#39;CvAIy2j_1a-rJ&#39;, &#39;symbol&#39;: &#39;AFC&#39;, &#39;name&#39;: &#39;Anti-Fraud Chain&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/oegp1dZG4um/anti-fraud-chain.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.3946629063899038&#39;, &#39;listedAt&#39;: 1543592520, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.05&#39;, &#39;rank&#39;: 1460, &#39;sparkline&#39;: [&#39;0.4028643821808892&#39;, &#39;0.40271222065785683&#39;, &#39;0.4011925760156203&#39;, &#39;0.39928438877866157&#39;, &#39;0.4003099592336636&#39;, &#39;0.4006323332614161&#39;, &#39;0.4010680971850449&#39;, &#39;0.4020086973160982&#39;, &#39;0.4009847685013928&#39;, &#39;0.39966805108265985&#39;, &#39;0.39910852801208757&#39;, &#39;0.3978132991999599&#39;, &#39;0.39958317874812527&#39;, &#39;0.3989148880353738&#39;, &#39;0.3985887012720981&#39;, &#39;0.3988626554232115&#39;, &#39;0.39866027722389175&#39;, &#39;0.3971969374128272&#39;, &#39;0.39732325734327056&#39;, &#39;0.3951773002740325&#39;, &#39;0.39466781341686114&#39;, &#39;0.39429448976277215&#39;, &#39;0.39488703230839484&#39;, &#39;0.39485244553583554&#39;, &#39;0.3947603822914413&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/CvAIy2j_1a-rJ+anti-fraudchain-afc&#39;, &#39;24hVolume&#39;: &#39;41&#39;, &#39;btcPrice&#39;: &#39;0.000020734668024778&#39;}, {&#39;uuid&#39;: &#39;rI74W2gx6DuLs&#39;, &#39;symbol&#39;: &#39;ZCR&#39;, &#39;name&#39;: &#39;ZCore&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/LMgtIf8rdgu/zcore.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.003589688582498329&#39;, &#39;listedAt&#39;: 1534204800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;9.90&#39;, &#39;rank&#39;: 1459, &#39;sparkline&#39;: [&#39;0.003265060805090573&#39;, &#39;0.003263112768549614&#39;, &#39;0.00364162012647524&#39;, &#39;0.003987475521854153&#39;, &#39;0.003990159107760819&#39;, &#39;0.004000649529974662&#39;, &#39;0.003998856388617115&#39;, &#39;0.00399030143617379&#39;, &#39;0.003983436779485222&#39;, &#39;0.003971721709499006&#39;, &#39;0.003989080555335338&#39;, &#39;0.003984605725265492&#39;, &#39;0.00397957855450301&#39;, &#39;0.003982016118378634&#39;, &#39;0.003799224960772401&#39;, &#39;0.003339275635282343&#39;, &#39;0.003463357164002285&#39;, &#39;0.003660511750426061&#39;, &#39;0.003707286061008745&#39;, &#39;0.003914918718574263&#39;, &#39;0.00387349909381335&#39;, &#39;0.003640290904291638&#39;, &#39;0.003642120012661395&#39;, &#39;0.003641778315608555&#39;, &#39;0.004243978137167391&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/rI74W2gx6DuLs+zcore-zcr&#39;, &#39;24hVolume&#39;: &#39;41&#39;, &#39;btcPrice&#39;: &#39;1.88618456412e-7&#39;}, {&#39;uuid&#39;: &#39;uvdwgYO8XF-Av&#39;, &#39;symbol&#39;: &#39;MONK&#39;, &#39;name&#39;: &#39;Monkey Project&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/4NcGdg13raj/monkey-project.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.013342775700497071&#39;, &#39;listedAt&#39;: 1511740800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-10.12&#39;, &#39;rank&#39;: 1458, &#39;sparkline&#39;: [&#39;0.014839493904563796&#39;, &#39;0.014805669209490313&#39;, &#39;0.014911441375281725&#39;, &#39;0.014719113862856192&#39;, &#39;0.014718857595864424&#39;, &#39;0.015003327036498674&#39;, &#39;0.01596794132469874&#39;, &#39;0.01622941680003873&#39;, &#39;0.016344085594972704&#39;, &#39;0.01630900218876403&#39;, &#39;0.01638028247359921&#39;, &#39;0.016361907567515304&#39;, &#39;0.016341264595785308&#39;, &#39;0.01635127391604753&#39;, &#39;0.016359258644303452&#39;, &#39;0.016312421958958545&#39;, &#39;0.01628882965822231&#39;, &#39;0.016273788258550654&#39;, &#39;0.016191637418068724&#39;, &#39;0.01618400314091514&#39;, &#39;0.016165788469026467&#39;, &#39;0.016185365519271612&#39;, &#39;0.016194641630844588&#39;, &#39;0.016187690194489974&#39;, &#39;0.014295580957043995&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/uvdwgYO8XF-Av+monkeyproject-monk&#39;, &#39;24hVolume&#39;: &#39;41&#39;, &#39;btcPrice&#39;: &#39;7.00964911651e-7&#39;}, {&#39;uuid&#39;: &#39;IPbVhqaRHFqd7&#39;, &#39;symbol&#39;: &#39;GET&#39;, &#39;name&#39;: &#39;Themis&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/s_FyvCVUK2z/themis.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000161111752677703&#39;, &#39;listedAt&#39;: 1552577460, &#39;tier&#39;: 1, &#39;change&#39;: &#39;72.60&#39;, &#39;rank&#39;: 1457, &#39;sparkline&#39;: [&#39;0.00009329343591707&#39;, &#39;0.000093272880845424&#39;, &#39;0.000092887768489906&#39;, &#39;0.000092482594850117&#39;, &#39;0.000092712997004725&#39;, &#39;0.000092783044766184&#39;, &#39;0.000164637413277014&#39;, &#39;0.000182275103559925&#39;, &#39;0.000181760241394684&#39;, &#39;0.000181233005157777&#39;, &#39;0.000180912794821292&#39;, &#39;0.000180384897298618&#39;, &#39;0.000181199724620891&#39;, &#39;0.000180815615871116&#39;, &#39;0.000180748710353463&#39;, &#39;0.00018087035614268&#39;, &#39;0.000172555755740492&#39;, &#39;0.000162111166813008&#39;, &#39;0.000162134611853101&#39;, &#39;0.000161217959516949&#39;, &#39;0.00016113155052813&#39;, &#39;0.000160998772779644&#39;, &#39;0.000161243033555231&#39;, &#39;0.000161207944388004&#39;, &#39;0.000161180532745145&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/IPbVhqaRHFqd7+themis-get&#39;, &#39;24hVolume&#39;: &#39;42&#39;, &#39;btcPrice&#39;: &#39;8.464032374e-9&#39;}, {&#39;uuid&#39;: &#39;vzs9mp4qQYw3&#39;, &#39;symbol&#39;: &#39;MBC&#39;, &#39;name&#39;: &#39;Microbitcoin&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/tZfbQ2-Yo/3507.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.000001500040779936&#39;, &#39;listedAt&#39;: 1550833860, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-1.50&#39;, &#39;rank&#39;: 1456, &#39;sparkline&#39;: [&#39;0.000001530703561291&#39;, &#39;0.000001530295834798&#39;, &#39;0.000001533431118112&#39;, &#39;0.000001510276032063&#39;, &#39;0.000001469413798709&#39;, &#39;0.000001512238335832&#39;, &#39;0.000001579938343468&#39;, &#39;0.000001566699580912&#39;, &#39;0.000001516350492744&#39;, &#39;0.000001518775557612&#39;, &#39;0.000001542537346146&#39;, &#39;0.000002087647720037&#39;, &#39;0.000001874775072427&#39;, &#39;0.00000148329933076&#39;, &#39;0.000001813552488884&#39;, &#39;0.00000196867358615&#39;, &#39;0.000002003805725083&#39;, &#39;0.000001927598934517&#39;, &#39;0.000001940796440288&#39;, &#39;0.000001789429610506&#39;, &#39;0.000001510371456214&#39;, &#39;0.000001509954989939&#39;, &#39;0.000001527536365798&#39;, &#39;0.000001549174241717&#39;, &#39;0.00000149967252547&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/vzs9mp4qQYw3+microbitcoin-mbc&#39;, &#39;24hVolume&#39;: &#39;44&#39;, &#39;btcPrice&#39;: &#39;7.8804889e-11&#39;}, {&#39;uuid&#39;: &#39;rflPPmiBQp1iC&#39;, &#39;symbol&#39;: &#39;ARQ&#39;, &#39;name&#39;: &#39;ArQmA&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/MtjTL5b4m/arqma.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.00552111849225458&#39;, &#39;listedAt&#39;: 1548328560, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.45&#39;, &#39;rank&#39;: 1455, &#39;sparkline&#39;: [&#39;0.005441488205532962&#39;, &#39;0.005439435183077947&#39;, &#39;0.005418906410659484&#39;, &#39;0.005393133575250766&#39;, &#39;0.005406994706728212&#39;, &#39;0.005411334397849897&#39;, &#39;0.005417223744531166&#39;, &#39;0.005510708571816132&#39;, &#39;0.00560953417040882&#39;, &#39;0.005591125407640083&#39;, &#39;0.00558331588574494&#39;, &#39;0.005565167187967264&#39;, &#39;0.005589912944824032&#39;, &#39;0.005580595570572523&#39;, &#39;0.005576008269093347&#39;, &#39;0.005579843868427974&#39;, &#39;0.005646870807993141&#39;, &#39;0.005748161325306155&#39;, &#39;0.005749976944937355&#39;, &#39;0.005718910554624108&#39;, &#39;0.005607753901910088&#39;, &#39;0.005515936181283145&#39;, &#39;0.005524230388770684&#39;, &#39;0.005523730863458857&#39;, &#39;0.005522455282887223&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/rflPPmiBQp1iC+arqma-arq&#39;, &#39;24hVolume&#39;: &#39;44&#39;, &#39;btcPrice&#39;: &#39;2.90001377103e-7&#39;}, {&#39;uuid&#39;: &#39;X3E9XWPYw&#39;, &#39;symbol&#39;: &#39;WCC&#39;, &#39;name&#39;: &#39;Wincash &#39;, &#39;color&#39;: &#39;#ffd2ab&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/-J18ej4xe/5233.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.01904133773635413&#39;, &#39;listedAt&#39;: 1568374620, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.01&#39;, &#39;rank&#39;: 1454, &#39;sparkline&#39;: [&#39;0.019420486169593965&#39;, &#39;0.019255525015278205&#39;, &#39;0.019302217682054333&#39;, &#39;0.019331291186463737&#39;, &#39;0.01934774651311185&#39;, &#39;0.019338444979878862&#39;, &#39;0.019412850352951545&#39;, &#39;0.019259326349562705&#39;, &#39;0.019280940886573877&#39;, &#39;0.01916144362710891&#39;, &#39;0.019172104779606458&#39;, &#39;0.019231655628644657&#39;, &#39;0.01929711766653089&#39;, &#39;0.019220769419691686&#39;, &#39;0.019238720439946476&#39;, &#39;0.01906349910961925&#39;, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/X3E9XWPYw+wincash-wcc&#39;, &#39;24hVolume&#39;: &#39;48&#39;, &#39;btcPrice&#39;: &#39;9.99989779081e-7&#39;}, {&#39;uuid&#39;: &#39;eUz6eFlDRWylv&#39;, &#39;symbol&#39;: &#39;XLQ&#39;, &#39;name&#39;: &#39;ALQO&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/B54cJ6AMBI/alqo.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.002093730851718513&#39;, &#39;listedAt&#39;: 1534809600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-27.09&#39;, &#39;rank&#39;: 1452, &#39;sparkline&#39;: [&#39;0.00211954359453284&#39;, &#39;0.002124995493775791&#39;, &#39;0.002127241086217668&#39;, &#39;0.002121037843436786&#39;, &#39;0.002120131210742011&#39;, &#39;0.002114152153867603&#39;, &#39;0.002110072132643698&#39;, &#39;0.00211952211584813&#39;, &#39;0.002119914317648611&#39;, &#39;0.002114645280646831&#39;, &#39;0.00211476126850062&#39;, &#39;0.002116186636214939&#39;, &#39;0.002117214807734765&#39;, &#39;0.002113877573899631&#39;, &#39;0.002107668486604251&#39;, &#39;0.002108854460738156&#39;, &#39;0.002104991784558264&#39;, &#39;0.002095691497080264&#39;, &#39;0.002095200128148159&#39;, &#39;0.002092129982259937&#39;, &#39;0.00209275305345521&#39;, &#39;0.002095745659173733&#39;, &#39;0.002095609805321103&#39;, &#39;0.002094447936758663&#39;, &#39;0.002095087007707691&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/eUz6eFlDRWylv+alqo-xlq&#39;, &#39;24hVolume&#39;: &#39;60&#39;, &#39;btcPrice&#39;: &#39;1.09994493982e-7&#39;}, {&#39;uuid&#39;: &#39;f8y0e39gedW-Y&#39;, &#39;symbol&#39;: &#39;YCE&#39;, &#39;name&#39;: &#39;MYCE&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/YUJbQllWkI/myce.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.001751101719475113&#39;, &#39;listedAt&#39;: 1545305580, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-3.15&#39;, &#39;rank&#39;: 1451, &#39;sparkline&#39;: [&#39;0.001787801895853862&#39;, &#39;0.001787196386031496&#39;, &#39;0.001784639602001499&#39;, &#39;0.001777022382289948&#39;, &#39;0.001781622668418277&#39;, &#39;0.001778003379062794&#39;, &#39;0.001765379192734139&#39;, &#39;0.001779323750323584&#39;, &#39;0.001788959975639231&#39;, &#39;0.001783600178208308&#39;, &#39;0.001770796302095709&#39;, &#39;0.001762000816640841&#39;, &#39;0.001755889784689149&#39;, &#39;0.001759546767166288&#39;, &#39;0.001758423196783209&#39;, &#39;0.001770288506830896&#39;, &#39;0.001753007123391037&#39;, &#39;0.001771461409941952&#39;, &#39;0.001772088189761541&#39;, &#39;0.001761686074625846&#39;, &#39;0.001760258853638706&#39;, &#39;0.001758596362155071&#39;, &#39;0.001766528613306689&#39;, &#39;0.001762722882002187&#39;, &#39;0.001741607318732999&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/f8y0e39gedW-Y+myce-yce&#39;, &#39;24hVolume&#39;: &#39;62&#39;, &#39;btcPrice&#39;: &#39;9.1994416277e-8&#39;}, {&#39;uuid&#39;: &#39;Qal82VrX&#39;, &#39;symbol&#39;: &#39;UNN&#39;, &#39;name&#39;: &#39;UniNet&#39;, &#39;color&#39;: &#39;#049fc4&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/LEGFuKk6J/GyWRnJKC_400x400.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.17111309193566593&#39;, &#39;listedAt&#39;: 1572352560, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-11.72&#39;, &#39;rank&#39;: 1450, &#39;sparkline&#39;: [&#39;0.19369458088074873&#39;, &#39;0.19358023890167583&#39;, &#39;0.0918273779733805&#39;, &#39;0.01892594179340456&#39;, &#39;0.01907162629006394&#39;, &#39;0.019132862448610503&#39;, &#39;0.019104759891017432&#39;, &#39;0.019053723471382934&#39;, &#39;0.019098401688716987&#39;, &#39;0.01899293142881448&#39;, &#39;0.019007120161169424&#39;, &#39;0.018998270801530236&#39;, &#39;0.019083428353491496&#39;, &#39;0.01894223201915478&#39;, &#39;0.018930140785913846&#39;, &#39;0.01887490931693723&#39;, &#39;0.01889314967234296&#39;, &#39;0.018864226951938033&#39;, &#39;0.01885350681279364&#39;, &#39;0.01867349181631003&#39;, &#39;0.018658457061141904&#39;, &#39;0.01874443086433796&#39;, &#39;0.01882568657122326&#39;, &#39;0.018891232617501356&#39;, &#39;0.11579666881439883&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Qal82VrX+uninet-unn&#39;, &#39;24hVolume&#39;: &#39;67&#39;, &#39;btcPrice&#39;: &#39;0.00000898945437317&#39;}, {&#39;uuid&#39;: &#39;ezR2yeG1X&#39;, &#39;symbol&#39;: &#39;GPS&#39;, &#39;name&#39;: &#39;GPS Ecosystem&#39;, &#39;color&#39;: &#39;#2ac27a&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/wAr2DzdaP/gps.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.00152330701890833&#39;, &#39;listedAt&#39;: 1565964600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.01&#39;, &#39;rank&#39;: 1449, &#39;sparkline&#39;: [&#39;0.001553638893567517&#39;, &#39;0.001540442001222256&#39;, &#39;0.001544177414564347&#39;, &#39;0.001546503294917099&#39;, &#39;0.001547819721048948&#39;, &#39;0.001547075598390309&#39;, &#39;0.001553028028236124&#39;, &#39;0.001540746107965017&#39;, &#39;0.00154247527092591&#39;, &#39;0.001532915490168713&#39;, &#39;0.001533768382368517&#39;, &#39;0.001538532450291573&#39;, &#39;0.001543769413322471&#39;, &#39;0.001537661553575335&#39;, &#39;0.001539097635195718&#39;, &#39;0.00152507992876954&#39;, None, None, None, None, None, None, None, None, None], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/ezR2yeG1X+gpsecosystem-gps&#39;, &#39;24hVolume&#39;: &#39;68&#39;, &#39;btcPrice&#39;: &#39;7.9999182327e-8&#39;}, {&#39;uuid&#39;: &#39;CB_utF8r69Aze&#39;, &#39;symbol&#39;: &#39;ACM&#39;, &#39;name&#39;: &#39;Actinium&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/5mNWGtDKlr/actinium.svg&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.004188434718262095&#39;, &#39;listedAt&#39;: 1538784000, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-2.05&#39;, &#39;rank&#39;: 1448, &#39;sparkline&#39;: [&#39;0.004275455018633041&#39;, &#39;0.004273841929561244&#39;, &#39;0.00425771217980388&#39;, &#39;0.004237462094839888&#39;, &#39;0.004248352983857881&#39;, &#39;0.004251762741167776&#39;, &#39;0.004256390084988774&#39;, &#39;0.004266365942487731&#39;, &#39;0.004255508680999795&#39;, &#39;0.004241543412692477&#39;, &#39;0.004235619125766085&#39;, &#39;0.004221850970182062&#39;, &#39;0.004240623613314783&#39;, &#39;0.004233555260434328&#39;, &#39;0.004230075238622538&#39;, &#39;0.004232985003635015&#39;, &#39;0.004230842681307863&#39;, &#39;0.004215318305224514&#39;, &#39;0.004216649759620728&#39;, &#39;0.004193867740057679&#39;, &#39;0.004188477804034099&#39;, &#39;0.004184503309938937&#39;, &#39;0.004190795467343278&#39;, &#39;0.004190416517106718&#39;, &#39;0.004189448835293755&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/CB_utF8r69Aze+actinium-acm&#39;, &#39;24hVolume&#39;: &#39;89&#39;, &#39;btcPrice&#39;: &#39;2.20001044699e-7&#39;}, {&#39;uuid&#39;: &#39;VsBvXSAc&#39;, &#39;symbol&#39;: &#39;NIT&#39;, &#39;name&#39;: &#39;Nesten&#39;, &#39;color&#39;: &#39;#f5f5f5&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/dY1LOWdWW/d-0piMJi_400x400.png&#39;, &#39;marketCap&#39;: None, &#39;price&#39;: &#39;0.006442024081455508&#39;, &#39;listedAt&#39;: 1570197300, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-14.80&#39;, &#39;rank&#39;: 1447, &#39;sparkline&#39;: [&#39;0.006615713989537583&#39;, &#39;0.006564091903717975&#39;, &#39;0.006567976723908416&#39;, &#39;0.006587973795641402&#39;, &#39;0.006621302798110666&#39;, &#39;0.006643399315640615&#39;, &#39;0.006645729822177459&#39;, &#39;0.00663082027618584&#39;, &#39;0.006608164382498732&#39;, &#39;0.006602578306560181&#39;, &#39;0.00658435799302711&#39;, &#39;0.006604045818055151&#39;, &#39;0.006609528369036646&#39;, &#39;0.006607103679981607&#39;, &#39;0.00660541802240944&#39;, &#39;0.006596608857424756&#39;, &#39;0.006544898672307887&#39;, &#39;0.006535768191268333&#39;, &#39;0.006482161599240325&#39;, &#39;0.006458379645557205&#39;, &#39;0.006445624750364423&#39;, &#39;0.00644819913252725&#39;, &#39;0.006460867135001361&#39;, &#39;0.00645148139635103&#39;, &#39;0.006446110323003027&#39;], &#39;lowVolume&#39;: True, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/VsBvXSAc+nesten-nit&#39;, &#39;24hVolume&#39;: &#39;97&#39;, &#39;btcPrice&#39;: &#39;3.38432792582e-7&#39;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success FXTC 0.0779200097827158 Icon Url: https://cdn.coinranking.com/VCcpsxMOb/fxtc-pools.svg Rank Url: https://coinranking.com/coin/JJEVdobzFfNn+fxtcpools-fxtc BOOT 0.006634674736075586 Icon Url: https://cdn.coinranking.com/WQzZCePhf/BOOT_1563330941007_light.png Rank Url: https://coinranking.com/coin/cuPvJZZsffVr3+bitcoinrebooted-boot BC 0.013626999507315067 Icon Url: https://cdn.coinranking.com/ZNnDh97xw/bc.png Rank Url: https://coinranking.com/coin/00143FdsSOmd+bitcoinconfidential-bc CCA 0.00015015368848074 Icon Url: https://cdn.coinranking.com/HY9czzwx_/4122.png Rank Url: https://coinranking.com/coin/CNm61Nt1_ih_+counoscoin-cca SVR 0.005450799802926027 Icon Url: https://cdn.coinranking.com/KCxC1pJB3/4594.png Rank Url: https://coinranking.com/coin/9I0C0CCwF_Rd+sovranocoin-svr MCN 0.000194671421533072 Icon Url: https://cdn.coinranking.com/BImEmxkuc/423.png Rank Url: https://coinranking.com/coin/58uJvk3vOkGf+monetaverde-mcn HOSP 0.003893428430661448 Icon Url: https://cdn.coinranking.com/o512Nw0-e/Hospital_Coin.png Rank Url: https://coinranking.com/coin/rL5brTWKayJU+hospitalcoin-hosp PEOS 0.000055204707588876 Icon Url: https://cdn.coinranking.com/-Q7fMD4gj/3910.png Rank Url: https://coinranking.com/coin/OtjXUM9ymkdI+peos-peos OPN 0.002920071322996086 Icon Url: https://cdn.coinranking.com/QZlPEiCWt/opn.png Rank Url: https://coinranking.com/coin/NXE_WTIH4Diy+openbit-opn YOB 0.005450799802926027 Icon Url: https://cdn.coinranking.com/Q6hQcT2s4/yobank.png Rank Url: https://coinranking.com/coin/br5t9N75S_XQ+yobank-yob XGK 5.637878338e-7 Icon Url: https://cdn.coinranking.com/HgleTy8uZ/F8pONNqi_400x400.png Rank Url: https://coinranking.com/coin/WuSl3eeO2Jt0+goldkash-xgk ABET 0.001406212522500279 Icon Url: https://cdn.coinranking.com/TVxx6o4vv/4502.png Rank Url: https://coinranking.com/coin/tsYwLMUHlEtr+altbet-abet INNBC 2.0021489258e-8 Icon Url: https://cdn.coinranking.com/3oSm7vNHl/innovative-bioresearch-coin.svg Rank Url: https://coinranking.com/coin/kDDoiqG4W6s+innovativebioresearchcoin-innbc TNR 1.4339925769e-8 Icon Url: https://cdn.coinranking.com/y61K2cKYf/tnr.png Rank Url: https://coinranking.com/coin/2lXwQqlHiVe3+tonestra-tnr NOR 0.005256128381392954 Icon Url: https://cdn.coinranking.com/xEnOrtfZ8Vc/noir.svg Rank Url: https://coinranking.com/coin/cdhFXkXV3mRP0+noir-nor GLT 0.000175204279379765 Icon Url: https://cdn.coinranking.com/jInwKn4GcYi/globaltoken.svg Rank Url: https://coinranking.com/coin/kpHamxaeamGVC+globaltoken-glt HATCH 0.00200241757081142 Icon Url: https://cdn.coinranking.com/txhGRJgGU/4185.png Rank Url: https://coinranking.com/coin/DKNkOIfAiPJB+hatch-hatch COW 0.003737427441862211 Icon Url: https://cdn.coinranking.com/HPlXvsAcg/5895.png Rank Url: https://coinranking.com/coin/kVSbvjZ8Mlit+cowry-cow EKO 0.000072028617323584 Icon Url: https://cdn.coinranking.com/S1l3RA1zX/eko.svg Rank Url: https://coinranking.com/coin/QmaGeC2kxWNzc+echolink-eko AUDAX 0.00021413856368638 Icon Url: https://cdn.coinranking.com/gdHwdnTfV/logo-284x284.png Rank Url: https://coinranking.com/coin/fYNqTyYGQ+audax-audax RISE 0.000502561667010731 Icon Url: https://cdn.coinranking.com/ryJ6Xr9NM/rise.svg Rank Url: https://coinranking.com/coin/p7VD1xOWgroAy+rise-rise YAP 0.001912308780124906 Icon Url: https://cdn.coinranking.com/F0TfmGvWF/yap.png Rank Url: https://coinranking.com/coin/k828ut4b+yapstone-yap GUN 0.000042684172199619 Icon Url: https://cdn.coinranking.com/BJjQnHg67/gun.svg Rank Url: https://coinranking.com/coin/_rfn6Am9rkEhy+guncoin-gun XSH 0.000136275913583028 Icon Url: https://cdn.coinranking.com/B148rB9Vz/xsh.svg Rank Url: https://coinranking.com/coin/d6UohiNz99VG_+shield-xsh EXCL 0.011096752963189438 Icon Url: https://cdn.coinranking.com/qg0ee-keMm/exclusive-coin.svg Rank Url: https://coinranking.com/coin/ugHHr58GbHNgR+exclusivecoin-excl GRIMM 0.0700104601574839 Icon Url: https://cdn.coinranking.com/FRKlvl5RV/4866.png Rank Url: https://coinranking.com/coin/gAcPTtQT+grimm-grimm MBC 0.000001551676220874 Icon Url: https://cdn.coinranking.com/tZfbQ2-Yo/3507.png Rank Url: https://coinranking.com/coin/vzs9mp4qQYw3+microbitcoin-mbc ZCR 0.003270249011629434 Icon Url: https://cdn.coinranking.com/LMgtIf8rdgu/zcore.svg Rank Url: https://coinranking.com/coin/rI74W2gx6DuLs+zcore-zcr ETNXP 5.40724403774e-7 Icon Url: https://cdn.coinranking.com/4E1UMVvqW/5669.png Rank Url: https://coinranking.com/coin/jxWBqe7rwfzS+electroneropulse-etnxp USDCLP 1.4676216587401518 Icon Url: https://cdn.coinranking.com/o9RJOVs42/usdclp-waves.png Rank Url: https://coinranking.com/coin/asCEJv7MI+usdclp-usdclp MEME 0.06210288061855142 Icon Url: https://cdn.coinranking.com/l4XrqHA7Gf/pepe.svg Rank Url: https://coinranking.com/coin/SNnn13b3diN6f+pepe-meme GET 0.000093463455186644 Icon Url: https://cdn.coinranking.com/s_FyvCVUK2z/themis.svg Rank Url: https://coinranking.com/coin/IPbVhqaRHFqd7+themis-get XQR 0.003504085587595303 Icon Url: https://cdn.coinranking.com/36Qb3hA8e/3821.png Rank Url: https://coinranking.com/coin/KdRlEzu26D8Y+qredit-xqr LTK 4.0058290611e-8 Icon Url: https://cdn.coinranking.com/TbnjE4Wmh/litkoin.png Rank Url: https://coinranking.com/coin/kRdfEZ63gfQ2+litkoin-ltk CURE 0.00934463407426479 Icon Url: https://cdn.coinranking.com/N_mfFHsEa/333.png Rank Url: https://coinranking.com/coin/NMbkyaCf4rWjJ+curecoin-cure APR 0.000661882833212446 Icon Url: https://cdn.coinranking.com/2eD2WvevrVG/apr-coin.svg Rank Url: https://coinranking.com/coin/htLu2sg2z0lUU+aprcoin-apr XGG 0.0299026883154086 Icon Url: https://cdn.coinranking.com/tM0p4PBZV4v/going-gems.svg Rank Url: https://coinranking.com/coin/9KoB2vsXgpfp+goinggems-xgg LUNES 0.004404508195435037 Icon Url: https://cdn.coinranking.com/_az8jwbum/Lunes-Symbol-200x200.png Rank Url: https://coinranking.com/coin/Jwrwwrh_z9s2+lunes-lunes SPHR 0.007981874938434509 Icon Url: https://cdn.coinranking.com/4kr3S0UafJ2/sphere-coin.svg Rank Url: https://coinranking.com/coin/8EOiMbVD_r71T+spherecoin-sphr BTCR 0.010231502830473535 Icon Url: https://cdn.coinranking.com/D1knZEEJul/bitcurrency.svg Rank Url: https://coinranking.com/coin/tBbVxV9pmmzlA+bitcurrency-btcr BSTY 0.006708098862218256 Icon Url: https://cdn.coinranking.com/jE3b0Qzpj0J/globalboost.svg Rank Url: https://coinranking.com/coin/0ltXI_jLXJRuS+globalboost-y-bsty AFC 0.4035513100157843 Icon Url: https://cdn.coinranking.com/oegp1dZG4um/anti-fraud-chain.svg Rank Url: https://coinranking.com/coin/CvAIy2j_1a-rJ+anti-fraudchain-afc WCC 0.019463875485540686 Icon Url: https://cdn.coinranking.com/-J18ej4xe/5233.png Rank Url: https://coinranking.com/coin/X3E9XWPYw+wincash-wcc ACM 0.004282735431699251 Icon Url: https://cdn.coinranking.com/5mNWGtDKlr/actinium.svg Rank Url: https://coinranking.com/coin/CB_utF8r69Aze+actinium-acm ARQ 0.005450754185799047 Icon Url: https://cdn.coinranking.com/MtjTL5b4m/arqma.svg Rank Url: https://coinranking.com/coin/rflPPmiBQp1iC+arqma-arq MONK 0.014076870847099432 Icon Url: https://cdn.coinranking.com/4NcGdg13raj/monkey-project.svg Rank Url: https://coinranking.com/coin/uvdwgYO8XF-Av+monkeyproject-monk VRC 0.000778719506188733 Icon Url: https://cdn.coinranking.com/ByFWHPdub/vrc.svg Rank Url: https://coinranking.com/coin/I9t3toniFVZow+vericoin-vrc YCE 0.001771509935950959 Icon Url: https://cdn.coinranking.com/YUJbQllWkI/myce.svg Rank Url: https://coinranking.com/coin/f8y0e39gedW-Y+myce-yce GPS 0.001557110038843255 Icon Url: https://cdn.coinranking.com/wAr2DzdaP/gps.png Rank Url: https://coinranking.com/coin/ezR2yeG1X+gpsecosystem-gps UNN 0.1938927358469401 Icon Url: https://cdn.coinranking.com/LEGFuKk6J/GyWRnJKC_400x400.png Rank Url: https://coinranking.com/coin/Qal82VrX+uninet-unn . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://chewyboba10.github.io/sushi-burrito/api/rapidAPI",
            "relUrl": "/api/rapidAPI",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter d is the 4 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter d is the 0 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://chewyboba10.github.io/sushi-burrito/week%207/2022/10/03/AP-error_testing.html",
            "relUrl": "/week%207/2022/10/03/AP-error_testing.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Big Idea 1 Notes",
            "content": "Big Idea 1 . Creative Development . AP Exam Weighting 10-13% . 1.1: Collaboration . Working in a team with diverse perspectives in the development of computing innovations helps practice interpersonal skills and produces a computing innovation reflecting the diversity of talents and perspectives of those who designed it. . Pair Programming: Two programmers work together as a pair. One writes the program code while the other reviews each line of program code . Think-Pair-Share: Students think through a problem alone, pair with a partner to share ideas, and then share results with the class . 1.2: Program Function and Purpose . The purpose of computing innovations is to solve problems or to pursue interests through creative expression. . An understanding of the purpose of a computing innovation provides developers with an improved ability to develop that computing innovation; . Program inputs are data sent to a computer for processing by a program. Input can come in a variety of forms. such as tactile, audio, visual, or text. . An event is associated with an action and supplies input data to a program. . Events can be generated when a key is pressed, a mouse is clicked, a program is started, or any other defined action occurs that affects the flow of execution. . Inputs usually affect the output produced by a program. . In event-driven programming, program statements are executed when triggered rather than through teh sequential flow of control. . Input can come from a user or other programs. . Program outputs are any data sent from a program to a device. . Program output is usually based on a program’s input or prior state. . A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software. . A code segment is a collection of program statements that is part of a program. . A program needs to work for a variety of inputs and situations . The behavior of a program is how a program functions during execution and is often described by how a user interacted with it . A program can be described broadly by what it does, or in detail by both what the program does and how the programs statements accomplish this function . 1.3: Program Design and Development . A development process can be ordered and intentional or exploratory in nature . There are multiple development processes. Commonly used phrases when developing a program: . investigating and reflecting | designing | prototyping | testing | . A development process that is iterative requires refinement and revision based on feedback, testing, or reflection throughout the process. This may require revisiting earlier phrases of hte process. . A development process that is incremental is one that breaks the problem into smaller pieces and make sure each piece works before adding it to the whole . The design of a program incorporates investigation to determine its requirements. . Investigation in a development process is useful for understanding and identifying the program constraints, as well as the concerns and interests of the people who will use the program. . Quiz Results . . Problems that I thought were challenging . .",
            "url": "https://chewyboba10.github.io/sushi-burrito/t1/notes/week%203/markdown/post/2022/09/29/Collegeboard-Notes.html",
            "relUrl": "/t1/notes/week%203/markdown/post/2022/09/29/Collegeboard-Notes.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Final Project Idea's Program Purpose",
            "content": "Project Idea . Our team wishes to build a minesweeper game with a python backend that could consistently communicate with our frontend website while creating a new aesthetic to this classic game. This project would be split into two main portions each with it’s own challenge. The first portion would be making the game engine in python, while the latter portion would be to design and create an aesthetically pleasing and functional frontend to display the Game Status. . The Frontend . The frontend aspect of this project should preferably display a grid of the game and incorporate some aspect of user input. Preliminary testing and experimentation could be done through textbox inputs of coordinate values, while prospective functions could include individual buttons on the Grid itself to provide a GUI for the user to interact with. In both cases, the frontend should be able to communicate with the python backend through JSON data to send and receive data. . More aspects about the Frontend aspects will be added with additional planning in the future. . The Backend . Arguably the more challenging half of this project, the backend would primarily serve to be the game engine of the minesweeper game. Additionally, the backend would also control and organize the various pages and menus on the website. In this writeup, we will only be focusing on the main goals and challenges faced by the Backend team. . Using Object Oriented Programming to create individual objects for the game. Some aspects that could be represented by such objects would be the gameboard and also the individual cells and nodes present within the game board. -Doing so would simplify the algorithmic aspect of the game, as the board itself could have methods and attributes to help control the game logic. -Moreover, using an object to represent an individual cell in the board would provide greater functionalities than just using a single variable | Use Enumerated types with the python enum module to create different values for the type and status of each node. Each of these types could then be bound to a constant value which could then be printed on the screen | Use Recursion to create an algorithm to recursively detect adjacent cells that are safe (AKA not mines). This algorithm would work in the following format: Maintain a list of current cells already determined to be safe | Verify if the four adjacent (up, down, left, right) cells next to the selected cell are safe or not, if safe, store the coordinate point in the list, if not, record the cell as a “border cell”, terminate the recursive process, and run another helper function to determine the precise number of mines surrounding the cell | Re-call the function for each of the surrounding adjacent cells to identify other consecutive cells who are safe. | Return a list of the coordinates of a contiguous block of safe cells | Mark the cells to be safe and calculate number of surrounding mines for border cells. | . | Verify the Game status: Game is won if all mines are flagged | Game is lost if a mine was dug by the user | . | Return the final result back to the front end. If a safe cell was dug, send out a JSON containing an array of the coordinates of the cell and it’s safe neighbors. If a mine was dug, send a JSON containing a boolean value to signify the end of the game. | . SCRUM Team . Here is an infographic of the scrum process showing our roles as a team . .",
            "url": "https://chewyboba10.github.io/sushi-burrito/t1/week%205/markdown/post/2022/09/25/project-purpose.html",
            "relUrl": "/t1/week%205/markdown/post/2022/09/25/project-purpose.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "JavaScript Usage",
            "content": "JavaScript Usage | Table Using JavaScript and HTML Fragments | . . Solving Physics Problems . Lets see if we can use math in JavaScript to Solve for physics problems . A car moves with a constant acceleration of 2.00 m/s² along a straight line from point A to point B starting from a speed of 5.00 m/s, taking 10 seconds. What distance does the car travel assuming the place where the car starts is the point of reference? . function solve(Δx) { var t = 10 // Variable t represents time var a = 2 // Variable a represents acceleration var vᵢ = 5 // Variable v represents the initial velocity var Δx = (vᵢ * t) + (0.5 * a * Math.pow(t, 2)) // Kinematic Equation for position as a function of time } function logIt() { console.log(&quot;Use the kinematic equation Δx = vᵢt + at²&quot;); console.log(&quot;plug in the known values: Δx = (5)(10) + (2)(10)²&quot;); console.log(&quot;The car travels&quot;, Δx, &quot;meters&quot;); } logIt() . Use the kinematic equation Δx = vᵢt + at² plug in the known values: Δx = (5)(10) + (2)(10)² The car travels 150 meters .",
            "url": "https://chewyboba10.github.io/sushi-burrito/frontend/javascript",
            "relUrl": "/frontend/javascript",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "HTML Fragments and JavaScript Data Table",
            "content": "JavaScript Usage | Table Using JavaScript and HTML Fragments | . . Console.log output . console.log() is similar to the function of print() in python. Running the command outputs the parameter to the console, so it you can see it in a Jupyter document. However, running the command in a web application does not make it visible from the browser. . console.log(&quot;Hello World&quot;) . Hello World . Variables . Variables in JavaScript are defined using the var keyword . var msg = &quot;Hello everyone&quot; console.log(msg) . Hello everyone . Functions . Functions are defined in JavaScript with the function keyword, a function name, and the arguments of the function. The code in the function needs to be contained in curly braces {}. . Since the variable msg was defined in the previous cell, it can be used as a parameter when calling the logIt function. . function logIt(output) { console.log(output) } logIt(msg) . Hello everyone . Reuse of a Function . Functions that have been previous defined in a previous cell can be called in any subsequent cell in the Jupyter notebook. A function/method is a process of creating a procedural abstraction . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;) logIt(&quot;Foo Bar!&quot;) logIt(2022) logIt(msg) . Reuse of logIT Hello, Students! Foo Bar! 2022 Hello everyone . Dynamic or Loosely Typed Language (string, number) . Javascript is a loosely typed language, so you don&#39;t have to specify what type of information will be stored in a variable in advance. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Creating a different table . Here is my usage of a Jupyter JavaScript kernel to create a table: . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } var ScrumMaster = new Person(&quot;Shaurya Goel&quot;, &quot;STG-7&quot;, 2025); ScrumMaster.setRole(&quot;Scrum Master&quot;); var DevOp = new Person(&quot;Evan Aparri&quot;, &quot;chewyboba10&quot;, 2024); var FrontendDevs = [ new Person(&quot;Haseeb Beg&quot;, &quot;h4seeb-cmd&quot;, 2024), new Person(&quot;Tirth Thakkar&quot;, &quot;Tirth-Thakkar&quot;, 2024), ]; var BackendDev = new Person(&quot;Alex Lu&quot;, &quot;YLu-1258&quot;, 2024); function Group(DevOp, BackendDevs, ScrumMaster, FrontendDevs){ ScrumMaster.setRole(&quot;Scrum Master&quot;); this.ScrumMaster = ScrumMaster; this.group = [ScrumMaster]; this.DevOp = DevOp; DevOp.setRole(&quot;Dev Op&quot;); this.group.push(DevOp); this.FrontendDevs = FrontendDevs; this.FrontendDevs.forEach(FrontendDev =&gt; { FrontendDev.setRole(&quot;Frontend Dev&quot;); this.group.push(FrontendDev); }); this.BackendDev = BackendDev; BackendDev.setRole(&quot;Backend Dev&quot;); this.group.push(BackendDev); this.json = []; this.group.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Group(DevOp, BackendDev, ScrumMaster, FrontendDevs); Group.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.group) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Shaurya Goel | STG-7 | 2025 | Scrum Master | Evan Aparri | chewyboba10 | 2024 | Dev Op | Haseeb Beg | h4seeb-cmd | 2024 | Frontend Dev | Tirth Thakkar | Tirth-Thakkar | 2024 | Frontend Dev | Alex Lu | YLu-1258 | 2024 | Backend Dev | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://chewyboba10.github.io/sushi-burrito/frontend/table",
            "relUrl": "/frontend/table",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Apec Chapter 29 Assignment #1",
            "content": "Chapter 29 Assignment #1: 29.1 . FQ: What were the goals of the revolt in sexual mores, the youth protests and student revolts, the feminist movement, and the antiwar protests? To what extent were their goals achieved? . 4/4 . A Culture of Protest . Permissive Society: The Western society after World War II that experienced more sexual freedom. Sexual freedom due to the increased accessibility of the birth control pill in the 1960s, but also included more freedom in homosexuality. This freedom saw an increase in pre- or extra-marital gratification. . Feminism: Revived in the late 1960s and accompanied the student protests. The interest in feminism create the women’s liberation movement which protests for true equality with men in their lives, have equal opportunities, and others like equal pay. The growth of this movement was helped by Betty Friedan’s work The Feminine Mystique which said that women did not have equality with men and were not growing to their potentials. . NOW: Founded by Betty Friedan in 1966, also known as the National Organization of Women. Aimed to have women have full participation in society and provide them with responsibilities and privileges that were the same as men. . Betty Friedan: Important figure in the women’s liberation movement. Published The Feminine Mystique and founded NOW . Kent State Protest: An antiwar protest against the Second Vietnam was in 1970. Protests escalated after President Lysdon Johnson instituted a military draft. This protest at Kent State University resulted in the death of four student protests by the Ohio National Guard. Resulted in the decline of the antiwar movement. This decline could also be from the American willingness to continue the war and the violence creating an appeal for “law and order.” . | Various protest movements in the Western world in the late 1960s . Education, sexual mores, women’s rights . | Antiwar movement against the Second Vietnam War . | . | Goals of these movements were not achieved immediately . Helped propel forces that would transform Western society . | . | . Revolt in Sexual Mores . WWI weakened that rigid code of morals and manners of the 19th c. . New sexual freedom (police in Berlin gave cards that allowed male and female homosexual prostitutes to practice their trade), exploring drugs, introduction of pornography in the 1920s . | Mostly happened in major cities and affected a small number of people . | | Changes in manner and morals were much more significant after WWI and was called the permissive society . | Sexual revolution in the 60s started in Sweden . Sex ed in school . | Disciminalization of homosexuality . | | U.S. and Europe also experienced this revolution . Gay rights movement in California in 1969 . Affected France, Italy, and Britain in 1970 . | | | The pill became more accessible in the mid-60s . Allowed people to be more free in sexual behavior . | | Once hidden subjects became widely known like sexually explicit plays, books, and movies . Allowed public sale of pornography and open prostitution in cities, like Amsterdam . Attracted many tourists . | | | Traditional family was broken apart by the new standards . Dramatic increase in divorice rates in the 60s . | Pre- and extra- marital sex rose substantially . 86% of women and 78% of men participated in extramarital sex based on a 1968 Netherland survey . | | | Another aspect of the sexual revolution for men was the Playboy magazine tha emerged in the 50s . Encouraged men to seek participate in extramarital sex through its nude photographs and articles on masculinity . | | | Youth Protest and Student Revolt . Drugs became part of the culture among young people during the 60s . Marijuna was the main choice of recreational drugs for college and university students . | | Harvard’s psychedelic research on the effects of LSD was done by Timothy Leary and became the leader of hallucinogenic experiences . Young people interested in mind expansion to high levels of consciousness . | | Attitudes towards sex and drugs were one way the youth of the 60s rebelled and questioned authority . | The Second Vietnam War and growing political conscious produced a youth protest movement in the late 60s . | Higher education was reserved for the wealthier classes before WWI . High education became more accessible through lowering fees which increased enrollment of those from the lower and middle classes . | | Student resentment produced from the learning environment . The classrooms after WWII had too many students and professors didn’t pay attention to the students . | Authoritarian-like administrators . | Students felt that the curriculum didn’t keep up with the times . | | The student’s discontent produced revolts in the late 1960s . Also came from students against the Second Vietnam War . | Most famous student revolt was in France, 1968 . | | French student revolt led to others in Europe . None became mass movements . | | West Berlin student revolt protested against Axel Springer, who was the leader of Germany&#39;s largest newspaper establishment . Wanted to destroy what they saw as the corrupt old order . | Influenced by the ideas of Herbert Marcuse who believed that students could free society from the capitalist ruling class . | | Germans’ attempt of revolution failed due to Berliners supporting police repression . | The peak of the student protest movement was in 1968 . | Causes of student radicalism . Wanted reform in universities . | Against the Second Vietnam War . | Against the materialism of society . | | Revolts died in the 70s but the ideas they raised revived in the 90s and 2000s . | | The Feminist Movement . Interest in feminism revived in the late 60s which led to the women’s liberation movement (WLM) . Argued that they were still not being treated equally to men despite having political and legal equality . | Women still paid less than men for the same job . | Traditional views of women . | | Betty Friedan contributed to the growth of the WLM in her 1963 work The Feminine Mystique . Argued that the expectation of the “ideal housewife and mother” limited women from growing to their full potential . | said that it affects the mental and physical health of the country . | | Friedan’s work propelled her into a well-known figure . | Friedan founded the National Organization for Women (NOW) in 1966 . Goals of women having equal privileges and responsibilities with men and be treated equally in society . | Helped the call for an amendment for equal rights of women in the U.S. Constitution . | | | Antiwar Protests . Another one of the main causes of the youth protests was the Second Vietnam War . Viewed as an act of imperialism and aggression . | | Demonstrations took place in Britain, France, and Italy in 1968 . Backfired due to people who liked order over chaos . | | Paolo Pasolini, Italian poet and intellectual, viewed the youth as spoiled brats that are narrow minded . | Divided the U.S. when a military draft was enacted by President Lyndon Johnson for the war in Vietnam escalated protests . Occupation of university buildings, sit-ins, teach-ins, and demonstrations that often led to violence . | | The Kent State Protest in 1970 at Kent State University resulted in 4 students being killed by the Ohio National Guard . Caused the antiwar movement to decline . Also due to Americans becoming more willing to continue the war . | Protests also caused a support for “law and order” . | | | | | . Summary . 29.1 Interaction . “Student Revolts of 1968”: Cause and Effect Flowchart . Cause Effect . Too many students for every professor . some professors didn’t pay attention to their students . | . | Authoritarian-like administrators . | Second Vietnam War . | Students felt like curriculum didn’t match with the times . | Students disliked the materialism of society . | . | Revolts against the Second Vietnam War in US and Europe . Kent State Protest resulted in the deaths of 4 students by the Ohio National Guard . | Americans as a whole became more unwilling to continue the war . | . | Student Revolts in France . | Revolts backfired due to public disliking the chaos and wanting order again . | . | .",
            "url": "https://chewyboba10.github.io/sushi-burrito/2022/09/14/APEC-Chapter-29-Assignment-1.html",
            "relUrl": "/2022/09/14/APEC-Chapter-29-Assignment-1.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Notes - College Board Create Performance Task",
            "content": "College Board Create Performance Task . Plan and ideas . Organizing various recipes based on where it originates, the ingredients it uses, and how long the recipe takes | Organizing various animals based on where it lives, what it eats, it population size, etc. | More ideas coming soon | . Row 1: Program Purpose and Function . Know the difference between program purpose and function . The purpose of my program will be to find specific recipes with conditions the user sets while the function will that users can specify what things they are looking for in a recipe (nationality, ingredients, time) that will be sorted by the computer. . Row 2: Data Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program (Skill Abstraction in Program Development - data) . Create lists and dictionaries that show what the nationality of the recipe, the ingredients that it uses, and how long it takes. . Row 3: Managing Complexity . Explain how abstraction manages complexity (Skill Abstraction in Program Development explain complexity) . Similar to how my posts are tagged, I want to create different tags for the recipes I put in the program so that it can be sorted out that way. Make different functions to reduce the complexity and therefore compartmentalizing the code. . Row 4: Procedural Abstraction . Use abstraction to manage complexity in a program (Skill Abstraction in Program Development - procedures/functions) . Find a way to sort it out the recipes based on input the user provides. . Row 5: Algorithm Implementation . Implement and apply an algorithm (Skill Algorithms and Program Development) . Still need to learn how to make good algorithms that are more efficient and are more complex . Row 6: Testing . Investigate the situation, context, or task (Skill Computational Solution Design - testing) . Test that the recipes sort out in the different ways I want them to. Ask for others’ opinions during the tests . Different Ways to study . Khan Academy | Look at notes/old code | research on the internet | .",
            "url": "https://chewyboba10.github.io/sushi-burrito/t1/notes/week%203/markdown/post/2022/09/08/CollegeBoard-Performance-Task.html",
            "relUrl": "/t1/notes/week%203/markdown/post/2022/09/08/CollegeBoard-Performance-Task.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Notes - AppLab Quiz Creation",
            "content": "AppLab Quiz Creation . Here is the link to my quiz . Starting off . Here is what I noticed when exploring: . the dimensions of the screen were 320 by 450. This Note is mainly used to help center the objects I add | I could change the color of the objects color, or the color of texts using setting the rgba values | I can duplicate the screen if I want to keep the format of the screen I created | I saw that the user can input text and that they can choose from a dropdown menu | I can switch between block code and text code | . Plan . Create a math themed quiz that tests users on their math knowledge | Create different difficulties | Find a way to go to a quiz of matching difficulty using the dropdown menu | Users will be able to input their answers and the computer will be able to sort out if the answer is correct | Be able to show the final score at the end of the quiz by abstracting the number of correct answers | create a variable that defines the number of questions and number of answers | . | . Process . I ended up designing a total of 13 different screens with three pairs of 3 questions, each with a different corresponding difficulty, a starting screen: Start_Window, a correct answer screen: CorrectScreen, a incorrect answer screen: WrongAnswer, and a end screen: End_Screen . . I created 3 different difficulties corresponding to different school levels . . I initially had problems figuring out how to use the dropdown to manage which difficulty quiz I would go to. However, after exploring a bit more in the code blocks, I was able to create an if else statement that would take me to different screens depending on what was chosen from the dropdown option. . . The format for all the questions is a user inputted response based one. The algorithm that I wrote makes it so that after you click the button the reads “Check Answer”, if the inputted texts matches the answer, you go to the CorrectScreen screen. If you get it wrong, you’ll go to the WrongAnswer screen (The question shown below, Normal_Question_1, is the only one where there were two possible answers, which I was able to do using double vertical bars). . . For the final question of each difficulty, I created a string concatenation that would show the results of the quiz in the blank text box in the End_Screen. . . Results and Findings (Testing) . The block form of code made it really easy to visualize how each block of code worked and made it easier to find out what went wrong. It was also cool to be able to convert the blocks into JavaScript, which made JavaScript muc easier to understand. While thinking back to how I made this quiz, I realize there are a few bugs that need to be patched up such as: . If I go back to the Start_Window clicking a “Quit” or “Home” button, the dropdown menu defaults to the previously chosen item. So if I end up choose the “Choose Difficulty” item and press start, it goes to the “Hard” difficulty. | edit: I was able to fix this by assigning a value to the variable: correct = 0 | . | The var correct does not reset back to 0 after starting another quiz | .",
            "url": "https://chewyboba10.github.io/sushi-burrito/t1/notes/week%203/markdown/post/2022/09/07/AppLab-Quiz.html",
            "relUrl": "/t1/notes/week%203/markdown/post/2022/09/07/AppLab-Quiz.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Lecture Notes - HTML Fragments",
            "content": "Lecture Notes - HTML Fragments . What Lists, Dictionaries, and Iterations are and how to use them . HTML Fragments . procedural abstraction and data abstraction - taking little pieces of information and putting them into different files so that something can take it in the bigger system. . markdown gets converted into html. everything in your website gets converted to html. . HTML Write Analysis . The theme of the Blog could be changed in the _config.yml file in the home directory of the blog. Either theme or remote_theme key pair value can be altered. The remote_theme method needs to have the jekyll-remote-theme to be defined in the plugins key. I decided to change to the midnight theme because I thought the theme name sounded cool. . I ran into a minor problem of naming the remote theme wrong, but that was quickly fixed . . Here is what the homepage looked like: . . The problems that I noticed were that the changes removed the blog’s navigation bar such as the search and tabs. That is the main problem I saw. When opening some of my posts, they were no negatively affected, but you are unable to open the homepage once you have left: . . One last thing that I noticed before I changed back to the minima theme is that the icon of the blog does not show up. The conclusion that I came from this experiment is that other Jekyll themes are not entirely compatible with fastpages and that minima is the preferred theme. .",
            "url": "https://chewyboba10.github.io/sushi-burrito/t1/notes/week%202/markdown/post/2022/09/01/Lecture-Notes.html",
            "relUrl": "/t1/notes/week%202/markdown/post/2022/09/01/Lecture-Notes.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lecture Notes - Lists, Dictionaries, Iteration",
            "content": "Lists . Starts with square brackets [], then list the values, quote each value, with commas after each variable . list = [1, 2, 3, 4] print(&quot;list&quot;, list, type(list), &quot;length&quot;, len(list)) print(&#39;- list[3]&#39;, list[3], type(list[3])) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) . list [1, 2, 3, 4] &lt;class &#39;list&#39;&gt; length 4 - list[3] 4 &lt;class &#39;int&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; . name = &quot;Evan&quot; print(&quot;What is the value of variable name:&quot;, name) . What is the value of variable name: Evan . Notes can be made this way. . Dictionary . Starts with squiggly brackets {} Define data patterns . A list of dictionaries . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Evan&quot;, &quot;LastName&quot;: &quot;Aparri&quot;, &quot;DOB&quot;: &quot;November 10, 2005&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;evanaparri@gmail.com&quot;, &quot;Owns_Cars&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;sleeping&quot;] }) print(InfoDb) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: &quot;4Runner&quot;, &quot;Hobbies&quot;: [&quot;eating&quot;] }) print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Evan&#39;, &#39;LastName&#39;: &#39;Aparri&#39;, &#39;DOB&#39;: &#39;November 10, 2005&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;evanaparri@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;none&#39;, &#39;Hobbies&#39;: [&#39;sleeping&#39;]}] [{&#39;FirstName&#39;: &#39;Evan&#39;, &#39;LastName&#39;: &#39;Aparri&#39;, &#39;DOB&#39;: &#39;November 10, 2005&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;evanaparri@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;none&#39;, &#39;Hobbies&#39;: [&#39;sleeping&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: &#39;4Runner&#39;, &#39;Hobbies&#39;: [&#39;eating&#39;]}] . Hacks . .append() . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Fav_Color&quot;: &quot;Unknown&quot;, &quot;Sleep_Schedule&quot; : &quot;Unknown&quot;, &quot;is_Teacher&quot;: True, &quot;Hobbies&quot;: [&quot;Teaching&quot;, &quot;Programming&quot;], &quot;Games&quot;: [], &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Evan&quot;, &quot;LastName&quot;: &quot;Aparri&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;November 10, 2005&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;evanaparri@gmail.com&quot;, &quot;Fav_Color&quot;: &quot;Blue&quot;, &quot;Sleep_Schedule&quot; : &quot;2am&quot;, &quot;is_Teacher&quot;: False, &quot;Hobbies&quot;: [&quot;Running&quot;, &quot;Reading&quot;, &quot;Eating Asian Food/ Food Connoisseur&quot;, &quot;Sleeping&quot;, &quot;Homework&quot;, &quot;Programming&quot;], &quot;Games&quot;: [], &quot;Owns_Cars&quot;: [&quot;2001-Camry&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Lu&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;November 29, 2006&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maodou1258@gmail.com&quot;, &quot;Fav_Color&quot;: &quot;White&quot;, &quot;Sleep_Schedule&quot; : &quot;1am&quot;, &quot;is_Teacher&quot;: False, &quot;Hobbies&quot;: [&quot;Programming&quot;, &quot;Tennis&quot;, &quot;Reading&quot;, &quot;Sleeping&quot;], &quot;Games&quot;: [&quot;League of Legends&quot;, &quot;VALORANT&quot;, &quot;Minecraft&quot;, &quot;OSU&quot;], &quot;Owns_Cars&quot;: [] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Fav_Color&#39;: &#39;Unknown&#39;, &#39;Sleep_Schedule&#39;: &#39;Unknown&#39;, &#39;is_Teacher&#39;: True, &#39;Hobbies&#39;: [&#39;Teaching&#39;, &#39;Programming&#39;], &#39;Games&#39;: [], &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Evan&#39;, &#39;LastName&#39;: &#39;Aparri&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;November 10, 2005&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;evanaparri@gmail.com&#39;, &#39;Fav_Color&#39;: &#39;Blue&#39;, &#39;Sleep_Schedule&#39;: &#39;2am&#39;, &#39;is_Teacher&#39;: False, &#39;Hobbies&#39;: [&#39;Running&#39;, &#39;Reading&#39;, &#39;Eating Asian Food/ Food Connoisseur&#39;, &#39;Sleeping&#39;, &#39;Homework&#39;, &#39;Programming&#39;], &#39;Games&#39;: [], &#39;Owns_Cars&#39;: [&#39;2001-Camry&#39;]}, {&#39;FirstName&#39;: &#39;Alex&#39;, &#39;LastName&#39;: &#39;Lu&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;November 29, 2006&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;maodou1258@gmail.com&#39;, &#39;Fav_Color&#39;: &#39;White&#39;, &#39;Sleep_Schedule&#39;: &#39;1am&#39;, &#39;is_Teacher&#39;: False, &#39;Hobbies&#39;: [&#39;Programming&#39;, &#39;Tennis&#39;, &#39;Reading&#39;, &#39;Sleeping&#39;], &#39;Games&#39;: [&#39;League of Legends&#39;, &#39;VALORANT&#39;, &#39;Minecraft&#39;, &#39;OSU&#39;], &#39;Owns_Cars&#39;: []}] . For loop . def data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Fav_Color&quot;]) print(&quot; t&quot;, &quot;Is Teacher?:&quot;, d_rec[&quot;is_Teacher&quot;]) print(&quot; t&quot;, &quot;Hours of Sleep:&quot;, d_rec[&quot;Sleep_Schedule&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot; + &quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Games: &quot; + &quot;, &quot;.join(d_rec[&quot;Games&quot;])) print(&quot; t&quot;, &quot;Cars Owned: &quot; + &quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Email: jmortensen@powayusd.com Favorite Color: Unknown Is Teacher?: True Hours of Sleep: Unknown Hobbies: Teaching, Programming Games: Cars Owned: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Evan Aparri Residence: San Diego Birth Day: November 10, 2005 Email: evanaparri@gmail.com Favorite Color: Blue Is Teacher?: False Hours of Sleep: 2am Hobbies: Running, Reading, Eating Asian Food/ Food Connoisseur, Sleeping, Homework, Programming Games: Cars Owned: 2001-Camry Alex Lu Residence: San Diego Birth Day: November 29, 2006 Email: maodou1258@gmail.com Favorite Color: White Is Teacher?: False Hours of Sleep: 1am Hobbies: Programming, Tennis, Reading, Sleeping Games: League of Legends, VALORANT, Minecraft, OSU Cars Owned: Haseeb Beg Residence: san diego Birth Day: december sixth 2007 Email: mirzahbeg123@gmail.com Favorite Color: blbue Is Teacher?: False Hours of Sleep: 11pm Hobbies: sleep, none Games: minecraft, none Cars Owned: n, o, n, e . While loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Email: jmortensen@powayusd.com Favorite Color: Unknown Is Teacher?: True Hours of Sleep: Unknown Hobbies: Teaching, Programming Games: Cars Owned: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Evan Aparri Residence: San Diego Birth Day: November 10, 2005 Email: evanaparri@gmail.com Favorite Color: Blue Is Teacher?: False Hours of Sleep: 2am Hobbies: Running, Reading, Eating Asian Food/ Food Connoisseur, Sleeping, Homework, Programming Games: Cars Owned: 2001-Camry Alex Lu Residence: San Diego Birth Day: November 29, 2006 Email: maodou1258@gmail.com Favorite Color: White Is Teacher?: False Hours of Sleep: 1am Hobbies: Programming, Tennis, Reading, Sleeping Games: League of Legends, VALORANT, Minecraft, OSU Cars Owned: . Printing in reverse . def reversed_loop(arr): print(&quot;Reversed output of For loop:&quot;) for i in arr[::-1]: print_data(i) reversed_loop(InfoDb) . Reversed output of For loop: Haseeb Beg Residence: san diego Birth Day: december sixth 2007 Email: mirzahbeg123@gmail.com Favorite Color: blbue Is Teacher?: False Hours of Sleep: 11pm Hobbies: sleep, none Games: minecraft, none Cars Owned: n, o, n, e Alex Lu Residence: San Diego Birth Day: November 29, 2006 Email: maodou1258@gmail.com Favorite Color: White Is Teacher?: False Hours of Sleep: 1am Hobbies: Programming, Tennis, Reading, Sleeping Games: League of Legends, VALORANT, Minecraft, OSU Cars Owned: Evan Aparri Residence: San Diego Birth Day: November 10, 2005 Email: evanaparri@gmail.com Favorite Color: Blue Is Teacher?: False Hours of Sleep: 2am Hobbies: Running, Reading, Eating Asian Food/ Food Connoisseur, Sleeping, Homework, Programming Games: Cars Owned: 2001-Camry John Mortensen Residence: San Diego Birth Day: October 21 Email: jmortensen@powayusd.com Favorite Color: Unknown Is Teacher?: True Hours of Sleep: Unknown Hobbies: Teaching, Programming Games: Cars Owned: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac . Recursion . def recursion(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursion(i + 1) return print(&quot;Recursive loop output n&quot;) recursion(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Email: jmortensen@powayusd.com Favorite Color: Unknown Is Teacher?: True Hours of Sleep: Unknown Hobbies: Teaching, Programming Games: Cars Owned: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Evan Aparri Residence: San Diego Birth Day: November 10, 2005 Email: evanaparri@gmail.com Favorite Color: Blue Is Teacher?: False Hours of Sleep: 2am Hobbies: Running, Reading, Eating Asian Food/ Food Connoisseur, Sleeping, Homework, Programming Games: Cars Owned: 2001-Camry Alex Lu Residence: San Diego Birth Day: November 29, 2006 Email: maodou1258@gmail.com Favorite Color: White Is Teacher?: False Hours of Sleep: 1am Hobbies: Programming, Tennis, Reading, Sleeping Games: League of Legends, VALORANT, Minecraft, OSU Cars Owned: Haseeb Beg Residence: san diego Birth Day: december sixth 2007 Email: mirzahbeg123@gmail.com Favorite Color: blbue Is Teacher?: False Hours of Sleep: 11pm Hobbies: sleep, none Games: minecraft, none Cars Owned: n, o, n, e . Adding to the List using Input . def add_entry(): name = input(&quot;First and last name seperated by spaces: &quot;).split() gender = input(&quot;What is your gender? &quot;) birthdate = input(&quot;When were you born? &quot;) residence = input(&quot;City you live in? &quot;) email = input(&quot;email? &quot;) color = input(&quot;favorite color? &quot;) sleep = input(&quot;When do you go to bed? &quot;) is_teacher = bool_input(&quot;Are you a teacher? [yes/no] &quot;) hobbies = [] print(&quot;hobbies? &quot;) hobbies = multi_input(hobbies) games = [] print(&quot;Games? &quot;) games = multi_input(games) cars = input(&quot;What car(s) do you own? &quot;) entry = { &quot;FirstName&quot;: name[0], &quot;LastName&quot;: name[1], &quot;Gender&quot;: gender, &quot;DOB&quot;: birthdate, &quot;Residence&quot;: residence, &quot;Email&quot;: email, &quot;Fav_Color&quot;: color, &quot;Sleep_Schedule&quot;: sleep, &quot;is_Teacher&quot;: is_teacher, &quot;Hobbies&quot;: hobbies, &quot;Games&quot; : games, &quot;Owns_Cars&quot;: cars } return entry def bool_input(prompt): while True: try: return {&quot;yes&quot;:True,&quot;no&quot;:False}[input(prompt).lower()] except KeyError: print(&quot;Invalid input please enter yes or no&quot;) def multi_input(arr): i = 0 temp = &quot;&quot; while temp != &quot;none&quot;: i+=1 temp = input(&quot;Please enter item number {0}, type none to proceede &quot;.format(str(i))) if temp.lower != &quot;none&quot;: arr.append(temp) return arr new_entry = add_entry() InfoDb.append(new_entry) print(InfoDb[-1]) . hobbies? Games? {&#39;FirstName&#39;: &#39;Haseeb&#39;, &#39;LastName&#39;: &#39;Beg&#39;, &#39;Gender&#39;: &#39;male&#39;, &#39;DOB&#39;: &#39;december sixth 2007&#39;, &#39;Residence&#39;: &#39;san diego&#39;, &#39;Email&#39;: &#39;mirzahbeg123@gmail.com&#39;, &#39;Fav_Color&#39;: &#39;blbue&#39;, &#39;Sleep_Schedule&#39;: &#39;11pm&#39;, &#39;is_Teacher&#39;: False, &#39;Hobbies&#39;: [&#39;sleep&#39;, &#39;none&#39;], &#39;Games&#39;: [&#39;minecraft&#39;, &#39;none&#39;], &#39;Owns_Cars&#39;: &#39;none&#39;} . Quiz . Questions_Answers = { &quot;What is 1 + 1 equal to?&quot; : [&quot;2&quot;], &quot;What is 1 times 1 equal to?&quot; : [&quot;1&quot;], &quot;What is 1 divided by 1 equal to?&quot; : [&quot;1&quot;], &quot;What is 1 divided by 0 equal to?&quot; : [&quot;Undefined&quot;, &quot;undefined&quot;] } def get_pair(dict): return [q for q, a in dict.items()], [a for q, a in dict.items()] def percentage(x, y): return &#39;{0:.2f}&#39;.format(100 * float(x)/float(y)) correct = 0 total = len(Questions_Answers) Questions_Answers_pairs = get_pair(Questions_Answers) for i in range(0,len(Questions_Answers_pairs[0])): rsp = input(&quot;Question: &quot; + Questions_Answers_pairs[0][i]) if rsp in Questions_Answers_pairs[1][i]: print(rsp + &quot; was correct!&quot;) correct+=1 else: print(&quot;{0} was incorrect, the correct answer was: {1}&quot;.format(rsp, &quot;, &quot;.join(Questions_Answers_pairs[1][i]))) print(&quot;Congratulations, you got {0}% on this quiz&quot;.format(percentage(correct,total))) . 2 was correct! 1 was correct! 0 was incorrect, the correct answer was: 1 undefined was correct! Congratulations, you got 75.00% on this quiz .",
            "url": "https://chewyboba10.github.io/sushi-burrito/t1/notes/week%202/2022/08/30/Lectures-Notes.html",
            "relUrl": "/t1/notes/week%202/2022/08/30/Lectures-Notes.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | list = [1, 2, 3, 4] print(&quot;list&quot;, list, type(list), &quot;length&quot;, len(list)) print(&#39;- list[3]&#39;, list[3], type(list[3])) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) . list [1, 2, 3, 4] &lt;class &#39;list&#39;&gt; length 4 - list[3] 4 &lt;class &#39;int&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; . name = &quot;Evan&quot; print(&quot;What is the value of variable name:&quot;, name) . What is the value of variable name: Evan . # variable of type string name = &quot;Evan&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 101.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Evan &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 101.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Evan&#39;, &#39;age&#39;: 16, &#39;score&#39;: 101.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Evan &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Evan&quot;, &quot;LastName&quot;: &quot;Aparri&quot;, &quot;DOB&quot;: &quot;November 10, 2005&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;evanaparri@gmail.com&quot;, &quot;Owns_Cars&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;sleeping&quot;] }) print(InfoDb) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: &quot;4Runner&quot;, &quot;Hobbies&quot;: [&quot;eating&quot;] }) print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Evan&#39;, &#39;LastName&#39;: &#39;Aparri&#39;, &#39;DOB&#39;: &#39;November 10, 2005&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;evanaparri@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;none&#39;, &#39;Hobbies&#39;: [&#39;sleeping&#39;]}] [{&#39;FirstName&#39;: &#39;Evan&#39;, &#39;LastName&#39;: &#39;Aparri&#39;, &#39;DOB&#39;: &#39;November 10, 2005&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;evanaparri@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;none&#39;, &#39;Hobbies&#39;: [&#39;sleeping&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: &#39;4Runner&#39;, &#39;Hobbies&#39;: [&#39;eating&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, d_rec[&quot;Owns_Cars&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Evan Aparri Residence: San Diego Birth Day: November 10, 2005 Cars: none Hobbies: sleeping Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Hobbies: eating . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://chewyboba10.github.io/sushi-burrito/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Installation Checks for Evan Aparri",
            "content": "Python Intstallation Checks . python --version python3 --version . Python 3.9.12 Python 3.9.12 . function PythonInstallationCheck () { printf &quot;Checking python version n&quot; if [[ $(python3 --version) ]]; then py3version=$(python3 --version | cut -d&quot; &quot; -f2) printf &quot; - Python version $py3version has already been installed&quot; else printf &quot;Python not found&quot; fi } PythonInstallationCheck . Checking python version - Python version has already been installed . Java Installation Checks . function JavaInstallationCheck () { printf &quot;Checking java version n&quot; if [[ $(java --version) ]]; then javaversion=$(java --version | cut -d&quot; &quot; -f2) printf &quot; - Java version $javaversion has already been installed n&quot; else printf &quot;Java not found n&quot; fi } function JavaCInstallationCheck () { printf &quot;Checking javaC version n&quot; if [[ $(javac --version) ]]; then javacversion=$(javac --version | cut -d&quot; &quot; -f2) printf &quot; - JavaC version $javacversion has already been installed n&quot; else printf &quot;JavaC not found n&quot; fi } JavaInstallationCheck JavaCInstallationCheck . Checking java version - Java version 11.0.16 Runtime 64-Bit has already been installed Checking javaC version - JavaC version 11.0.16 has already been installed . Anaconda . Anaconda Installation Checks . function AnacondaInstallationCheck () { printf &quot;Checking anaconda version n&quot; if [[ $(conda --version) ]]; then anacondaversion=$(conda --version | cut -d&quot; &quot; -f2) printf &quot; - anaconda version $anacondaversion has already been installed&quot; else printf &quot;Anaconda not found&quot; fi } AnacondaInstallationCheck . Checking anaconda version - anaconda version 4.13.0 has already been installed . Anaconda Package Installation Check . function AnacondaPackageCheck () { printf &quot;Checking Anaconda package version n&quot; if [[ $(conda list | grep $1) ]]; then anacondapackageversion=$(conda list | grep $1 | awk &#39;{print $2}&#39;) printf &quot; - Conda package $1 version $anacondapackageversion has already been installed&quot; else printf &quot; - Conda Package not found&quot; fi } AnacondaPackageCheck &quot;nodejs&quot; . Checking Anaconda package version - Conda package nodejs version 6.11.2 has already been installed . Jupyter . Jupyter Kernels Check . function JupyterKernelsCheck () { printf &quot;Checking jupyter kernel installation&quot; if [[ $(jupyter kernelspec list | grep $1) ]]; then kernelpath=$(jupyter kernelspec list | grep $1 | awk &#39;{print $2}&#39;) printf &quot; - Jupyter $1 kernel has been found at $kernelpath&quot; else printf &quot; - Jupyter $1 kernel not found&quot; fi } kernels=&quot;bash javascript python3&quot; for i in $kernels; do JupyterKernelsCheck $1 done . Checking jupyter kernel installationUsage: grep [OPTION]... PATTERNS [FILE]... Try &#39;grep --help&#39; for more information. Traceback (most recent call last): File &#34;/home/chewyboba10/anaconda3/bin/jupyter-kernelspec&#34;, line 10, in &lt;module&gt; sys.exit(KernelSpecApp.launch_instance()) File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/traitlets/config/application.py&#34;, line 846, in launch_instance app.start() File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/jupyter_client/kernelspecapp.py&#34;, line 266, in start return self.subapp.start() File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/jupyter_client/kernelspecapp.py&#34;, line 54, in start print(&#34;Available kernels:&#34;) BrokenPipeError: [Errno 32] Broken pipe - Jupyter kernel not foundChecking jupyter kernel installationUsage: grep [OPTION]... PATTERNS [FILE]... Try &#39;grep --help&#39; for more information. Traceback (most recent call last): File &#34;/home/chewyboba10/anaconda3/bin/jupyter-kernelspec&#34;, line 10, in &lt;module&gt; sys.exit(KernelSpecApp.launch_instance()) File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/traitlets/config/application.py&#34;, line 846, in launch_instance app.start() File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/jupyter_client/kernelspecapp.py&#34;, line 266, in start return self.subapp.start() File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/jupyter_client/kernelspecapp.py&#34;, line 54, in start print(&#34;Available kernels:&#34;) BrokenPipeError: [Errno 32] Broken pipe - Jupyter kernel not foundChecking jupyter kernel installationUsage: grep [OPTION]... PATTERNS [FILE]... Try &#39;grep --help&#39; for more information. Traceback (most recent call last): File &#34;/home/chewyboba10/anaconda3/bin/jupyter-kernelspec&#34;, line 10, in &lt;module&gt; sys.exit(KernelSpecApp.launch_instance()) File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/traitlets/config/application.py&#34;, line 846, in launch_instance app.start() File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/jupyter_client/kernelspecapp.py&#34;, line 266, in start return self.subapp.start() File &#34;/home/chewyboba10/anaconda3/lib/python3.9/site-packages/jupyter_client/kernelspecapp.py&#34;, line 54, in start print(&#34;Available kernels:&#34;) BrokenPipeError: [Errno 32] Broken pipe - Jupyter kernel not found .",
            "url": "https://chewyboba10.github.io/sushi-burrito/jupyter/2022/08/26/bash-checks.html",
            "relUrl": "/jupyter/2022/08/26/bash-checks.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Lecture Notes - Bash and Cloud",
            "content": "Notes . The cloud has all git repositories. Individual computers can clone repositories from the cloud takes it to their SSD . A pull action will pull any new updates made at the repository down to our local repository and update it with the latest changes. . A push action will push any new updates made at the local repository to our remote repository in the cloud and contribute to the git repository. . A sequence is two or more lines of code .",
            "url": "https://chewyboba10.github.io/sushi-burrito/markdown/2022/08/25/Lecture-Notes.html",
            "relUrl": "/markdown/2022/08/25/Lecture-Notes.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Python Quiz",
            "content": "Original Quiz by Mr. Mortenson . Below shows the initial code created by Mr. Mortenson in Hello to Python. . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, root running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: What command is used to include other functions that were previously developed? yes is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! root you scored 2/3 . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Question: Name the Python output command mentioned in this lesson? Answer: sequence Question: If you see many lines of code in order, what would College Board call it? Answer: sequence Question: Describe a keyword used in Python to define a function? Answer: sequence . Changes Made by Me . Compared to my friend Alex Lu&#39;s quiz, this will be very lacking, but I think that this is a good representation of my current abilities. . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 skipped = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;Are you ready to take a test? Answer &#39;yes&#39; or &#39;no&#39;&quot;) if rsp == &quot;yes&quot;: print(&quot;good luck&quot;) if rsp == &quot;no&quot;: print(&quot;too bad&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 elif rsp == &quot;skip&quot;: print(&quot;skipping question&quot;) skipped += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 elif rsp == &quot;skip&quot;: print(&quot;skipping question&quot;) skipped += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 elif rsp == &quot;skip&quot;: print(&quot;skipping question&quot;) skipped += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) + &quot;/&quot; + str(questions) + &quot;, with &quot; + str(skipped) + &quot; skipped questions&quot;) . Hello, chewyboba10 running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer &#39;yes&#39; or &#39;no&#39; too bad Question: What command is used to include other functions that were previously developed? skipping question Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! chewyboba10 you scored 2/3, with 0 skipped questions . Getting Rid of Repeating Code . It will take a long time to add these lines of code multiple times, so I&#39;ll try to reduce the amount I make when creating more questions. . import getpass, sys questions = 10 correct = 0 skipped = 0 def question_with_response(question, answer): print(&quot;Question: &quot; + question) msg = input() if msg == answer: print(msg + &quot; is correct&quot;) global correct correct += 1 elif msg == &quot;skip&quot;: print(&quot;Question has been skipped&quot;) global skipped skipped += 1 else: print(msg + &quot; is incorrect&quot;) def percentage(right, wrong): percentage = 100 * float(right)/float(wrong) return str(percentage) + &quot;%&quot; print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test?&quot;) rsp = input() if rsp == &quot;yes&quot;: print(&quot;Great! Good luck!&quot;) if rsp == &quot;no&quot;: print(&quot;too bad&quot;) question_with_response(&quot;Name the Python output command mentioned in this lesson?&quot;, &quot;print&quot;) question_with_response(&quot;If you see many lines of code in order, what would College Board call it?&quot;, &quot;sequence&quot;) question_with_response(&quot;Describe a keyword used in Python to define a function?&quot;, &quot;def&quot;) question_with_response(&quot;What command is used to evaluate correct or incorrect response in this quiz?&quot;, &quot;if&quot;) question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;expression&quot;) question_with_response(&quot;What is an input to a function or method called?&quot;, &quot;parameter&quot;) question_with_response(&quot;If Input is data the computer receives, what is the data that the computer sends back?&quot;, &quot;output&quot;) question_with_response(&quot;What is a reusable block of code called?&quot;, &quot;function&quot;) question_with_response(&quot;What operator is used for string concatenation in Python?&quot;, &quot;+&quot;) question_with_response(&quot;Which function can be used to turn numbers turned into string in Python?&quot;, &quot;str() function&quot;) print(&quot;Congratulations &quot; + getpass.getuser() + &quot;! You got &quot; + percentage(correct, questions) + &quot; and skipped &quot; + str(skipped) + &quot; questions!&quot;) . Hello, chewyboba10 running /bin/python3 You will be asked 10 questions. Are you ready to take a test? too bad Question: Name the Python output command mentioned in this lesson? print is correct Question: If you see many lines of code in order, what would College Board call it? sequence is correct Question: Describe a keyword used in Python to define a function? Question has been skipped Question: What command is used to evaluate correct or incorrect response in this quiz? if is correct Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct Question: What is an input to a function or method called? parameter is correct Question: If Input is data the computer receives, what is the data that the computer sends back? output is correct Question: What is a reusable block of code called? idk is incorrect Question: What operator is used for string concatenation in Python? + is correct Question: Which function can be used to turn numbers turned into string in Python? str() function is correct Congratulations chewyboba10! You got 80.0% and skipped 1 questions! . I am satisfied with how this turned out! Please comment if there is any problems or things I can work on. .",
            "url": "https://chewyboba10.github.io/sushi-burrito/jupyter/2022/08/23/Python-Quiz.html",
            "relUrl": "/jupyter/2022/08/23/Python-Quiz.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "First Blog Post",
            "content": "Hello Everyone . This is my first blog post! My name is Evan Aparri, and I currently have no experience with Computer Science. I am excited to learn how to continue working on my blog. . My Hobbies . Here are some of the things that I like to do when I have free time: . Sleep | Eat | Violin | Cross Country | Track and Field | Watch YouTube | . Other Things that I like . The color blue | Sushi | Traveling | . Thanks for visiting . Please let me know if there is anything that I could improve .",
            "url": "https://chewyboba10.github.io/sushi-burrito/markdown/2022/08/21/First-blog-post.html",
            "relUrl": "/markdown/2022/08/21/First-blog-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "First Jupyter Notebook",
            "content": "Trying things out . I&#39;m going to see if I can actually do something with Python . print(&quot;Hello everyone&quot;) . Hello everyone . It Worked! . Let&#39;s do something a little harder . a = 2 b = 5 c = (a + b) d = 7 if (c == d): for i in range(3): print(&quot;2+5 is equal to 7&quot;) . 2+5 is equal to 7 2+5 is equal to 7 2+5 is equal to 7 . That&#39;s all for now! . &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ======= print(&quot;good afternoon&quot;) . good afternoon . &gt;&gt;&gt;&gt;&gt;&gt;&gt; 31e5fbc87eaddd935747d10ca14fa5f646cc95c1",
            "url": "https://chewyboba10.github.io/sushi-burrito/jupyter/2022/08/20/first-notebook.html",
            "relUrl": "/jupyter/2022/08/20/first-notebook.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chewyboba10.github.io/sushi-burrito/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chewyboba10.github.io/sushi-burrito/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "Python RapidAPI | Food | .",
          "url": "https://chewyboba10.github.io/sushi-burrito/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Frontend",
          "content": "Trying Frontend for the First Time . Here is frontend for JavaScript posts I have made . JavaScript Usage | Table Using JavaScript and HTML Fragments | .",
          "url": "https://chewyboba10.github.io/sushi-burrito/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Lecture Notes",
          "content": "This page contains the notes I have taken during Mr. Mortenson’s lecture . Table of Contents . Week 0 . Date Subject . Blank | Blank | . Week 1 . Date Subject . 8/24/22 | Blog Posting and Configuration | . 8/25/22 | Bash and Cloud | . Week 2 . Date Subject . 8/29/22 | Data Abstraction | . 8/30/22 | List, Dictionaries, Iteration | . 9/1/22 | HTML Fragments | .",
          "url": "https://chewyboba10.github.io/sushi-burrito/_pages/lecture-notes.html",
          "relUrl": "/_pages/lecture-notes.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page10": {
          "title": "Vocab",
          "content": "Vocab Definition Example . Input | Data that is taken in by the computer from the user | print(“hello world!”) | . Output | Data that is returned by the computer to the user | input(“What are your hobbies?”) | .",
          "url": "https://chewyboba10.github.io/sushi-burrito/_pages/vocab.html",
          "relUrl": "/_pages/vocab.html",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chewyboba10.github.io/sushi-burrito/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}